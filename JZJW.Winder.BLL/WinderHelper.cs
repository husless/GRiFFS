using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using System.Text;
//using JZJW.Winder.DAL;
using JZJW.Winder.Json;
//using System.Data.OracleClient;
using Oracle.DataAccess.Client;


namespace JZJW.Winder.BLL
{
    public class WinderHelper
    {
        public static string GetSchemeNewId(NameValueCollection reqParams)
        {
            DateTime dt = DateTime.Now;
            string slnclass = reqParams.Get("slnclass");
            //string sql = "select count(sid) from jzjw_scheme where slnclass='" + slnclass + "' and substr(sid,1,8) ="+dt.ToString("yyyyMMdd");
            string sql = "select max(substr(sid,11,3)) from jzjw_scheme where slnclass='" + slnclass + "' and substr(sid,1,8)=" + dt.ToString("yyyyMMdd"); //to_char(sysdate,'yyyymmdd')";
            object obj = DbHelper.GetSingle(sql);
            string newId = "";
            int currVal = 0;
            if (obj != null)
            {
                //ren判断是否为空
                if (obj is DBNull)
                {

                }
                else
                {
                    currVal = Convert.ToInt32(obj);
                }
                currVal++;
            }
            else
            {
                currVal++;
            }
            newId = dt.ToString("yyyyMMdd") + "HP" + Convert.ToString(currVal).PadLeft(3, '0');
            return "{\"id\":\"" + newId + "\"}";
        }
        /// <summary>
        /// 新建方案
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string NewScheme(NameValueCollection reqParams)
        {


            string slnid = reqParams.Get("sid");
            string name = reqParams.Get("name");
            string slnclass = reqParams.Get("slnclass");
            string remark = reqParams.Get("remark");
            string username = reqParams.Get("username");
            string preheat = reqParams.Get("preheat");

            /*
           string slnid = "20141110HP012";
           string name = "ddd";
           string slnclass ="w";
           string username = "lrh";
           string remark = "";
            * */
            //用户名

            string guid = Guid.NewGuid().ToString().Replace("-", "");
            string str = "";
            string sql = "insert into jzjw_scheme (sid,name,slnclass,guid,username";
            if (!string.IsNullOrEmpty(remark))
            {
                sql += ",remark ) values('" + slnid + "','" + name + "','" + slnclass + "','" + guid + "','" + username + "','" + remark + "')";
            }
            else
            {
                sql += ") values('" + slnid + "','" + name + "','" + slnclass + "','" + guid + "','" + username + "')";
            }

            if (DbHelper.ExecuteSql(sql) > 0)
            {
                //自动设置模型参数
                SetSchemeParams(slnid, name);
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        /// <summary>
        /// 获取方案列表 根据用户名
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetSchemeListOld(NameValueCollection reqParams)
        {
            string slnclass = reqParams.Get("slnclass");
            string username = reqParams.Get("username");
            string sql = "select * from jzjw_scheme ";
            if (!string.IsNullOrEmpty(slnclass))
            {
                sql += " where slnclass='" + slnclass + "'";
            }
            if (!string.IsNullOrEmpty(username))
            {
                sql += " where username='" + username + "'";
            }
            else
            {
                sql += " where username is null";
            }
            return GetJson(DbHelper.Query(sql));
        }

        /// <summary>
        /// 获取方案列表 根据用户名
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetSchemeList(NameValueCollection reqParams)
        {
            string slnclass = reqParams.Get("slnclass");
            string username = reqParams.Get("username");
            string sql = "select * from jzjw_scheme ";
            if (!string.IsNullOrEmpty(slnclass))
            {
                sql += " where slnclass='" + slnclass + "'";
            }
            if (!string.IsNullOrEmpty(username))
            {
                sql += " where username='" + username + "'";
            }

            return GetJson(DbHelper.Query(sql));
        }

        public static string AddRegion(NameValueCollection reqParams)
        {
            string slnid = reqParams.Get("sid");
            string regionid = reqParams.Get("regionid");
            //前三位替换成341
            //regionid = "341" + regionid.Substring(3);

            string binstrlen = reqParams.Get("binstrlen");
            string binstrval = reqParams.Get("binstrval");
            string reghighid = reqParams.Get("reghighid");
            if (string.IsNullOrEmpty(reghighid)) reghighid = "0";

            //string regionidnew = GetNewRegionId(reghighid, regionid);
            string regionidnew = regionid;

            string sql = "", sql1 = "", sql2 = "", str = "";
            sql = "insert into jzjw_defindednodes";
            sql2 = "(sid";
            sql1 += "'" + slnid + "'";

            if (!string.IsNullOrEmpty(regionid))
            {
                sql2 += ",regionid";
                sql1 += "," + regionid;
            }

            if (!string.IsNullOrEmpty(binstrlen))
            {
                sql2 += ",binstrlen";
                sql1 += " ," + binstrlen;
            }

            if (!string.IsNullOrEmpty(binstrval))
            {
                sql2 += ",binstrval";
                sql1 += " ," + binstrval;
            }
            if (!string.IsNullOrEmpty(regionidnew))
            {
                sql2 += ",regionidnew";
                sql1 += " ," + regionidnew;
            }
            if (!string.IsNullOrEmpty(reghighid))
            {
                sql2 += ",reghighid";
                sql1 += " ," + reghighid;
            }

            sql2 += ") values(";
            sql = sql + sql2 + sql1 + ")";

            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        private static List<RiverSeg> riverSegs = new List<RiverSeg>();

        /// <summary>
        /// 提交河段选择
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddRegionSel(NameValueCollection reqParams)
        {
            string jsonStr = reqParams.Get("rslt");
            string sql = "", str = "", sid = "";
            //没用string jsonStr = "{\"results\":" + rslt + "}";
            //测试2数据ByRen
            //string jsonStr="{\"features\":[{\"reghighid\":\"\",\"regionid\":\"419001248012\",\"username\":\"test\",\"shape\":\"{\"paths\":[[[-10063666.395566417,4181051.956411512],[-10063851.928264271,4181051.956411512],[-10063882.850280467,4181014.1491154423],[-10063882.850280467,4180938.5349101434],[-10064006.538745709,4180787.308169227],[-10064192.071343454,4180787.308169227],[-10064253.915576072,4180711.6955111935],[-10064284.83769238,4180711.6955111935],[-10064439.448173815,4180522.6661223727],[-10064439.448173815,4180258.0305151376],[-10064439.448173815,4180182.4214668903],[-10064439.448173815,4180069.0089837178],[-10064470.370290125,4180031.2050396674],[-10064470.370290125,4179161.7501440896],[-10064470.370290125,4179123.9492931506],[-10064501.292406432,4179086.148693452],[-10064470.370290125,4179048.3481002273],[-10064470.370290125,4178481.3547856994],[-10064501.292406432,4178443.5562539296],[-10064501.292406432,4178254.565649779],[-10064563.136639057,4178178.9702609065],[-10064594.058755364,4178178.9702609065],[-10064810.51346942,4177914.390579736]]],\"spatialReference\":{\"wkid\":102100}}\",\"sid\":\"20141110HP006\",\"binstrval\":\"0\",\"binstrlen\":\"1208\"}],\"extent\":-10063666.395566417;-10064810.51346942;4181051.956411512;4177914.390579736}";
            //含有水库节点

            //string jsonStr = "{\"features\":[{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"\",\"regionid\":\"117001372010006001\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12968522.258515162,3062195.1365455063],[12968522.258515162,3061987.808562799],[12968553.180631476,3061953.2541727996],[12968553.180631476,3061676.8221723204],[12968522.258515162,3061642.268534207],[12968522.258515162,3061607.7149796365],[12968460.414382664,3061538.608121108],[12968460.414382664,3061434.9485716796],[12968460.414382664,3061365.842548461]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"GS\",\"binstrlen\":\"2536\"},{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"\",\"regionid\":\"117001372010006001\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12966945.231184056,3060294.7422426715],[12966790.620602513,3060467.494982835],[12966728.776469996,3060467.494982835],[12966697.85435368,3060432.9442678182],[12966666.93223738,3060432.9442678182],[12966357.7111744,3060087.441821486],[12966326.789058086,3060087.441821486],[12966203.100592852,3060087.441821486],[12966172.178576656,3060052.8920248463],[12966172.178576656,3060018.342311685],[12966141.25646034,3059983.7926820037],[12966110.334344026,3059983.7926820037],[12966017.567995109,3059880.1444056807],[12966017.567995109,3059707.398761556],[12965924.801646177,3059603.7523767166],[12965924.801646177,3059569.203748705],[12965924.801646177,3059534.6553160115],[12965893.87962998,3059500.106854927],[12965893.87962998,3059292.817841077],[12965862.957513666,3059258.2699641986],[12965862.957513666,3059189.174572656],[12965893.87962998,3059154.6269461405],[12965893.87962998,3059050.9845672827],[12965832.035397362,3058981.89006527],[12965832.035397362,3058809.1553823436],[12965832.035397362,3058705.515506745],[12965862.957513666,3058670.9690484167],[12965862.957513666,3058601.876493895],[12965832.035397362,3058567.3302858607],[12965893.87962998,3058498.2381200767],[12965893.87962998,3058429.1462880033],[12965832.035397362,3058360.054789619],[12965862.957513666,3058325.509165567],[12965862.957513666,3058290.9636249323],[12965801.113281049,3058221.8729057633]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"GS\",\"binstrlen\":\"2524\"},{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"\",\"regionid\":\"117001372010006\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12973995.471199816,3058463.692162329],[12973902.704951,3058360.054789619],[12973902.704951,3058325.509165567],[12973871.7828347,3058290.9636249323],[12973871.7828347,3058256.418279561],[12973840.860718386,3058256.418279561],[12973593.483888024,3057980.0576247964],[12973593.483888024,3057910.9684070507],[12973562.561771708,3057876.4238673705],[12973562.561771708,3057841.8794110944],[12973531.639655406,3057807.335038223],[12973531.639655406,3057738.2465426824],[12972944.11964575,3057081.922695699]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"GS\",\"binstrlen\":\"2527\"},{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"\",\"regionid\":\"117001372010006\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12970222.974311516,3055907.523607501],[12970222.974311516,3055734.825919832],[12970192.05229532,3055700.2867441173],[12970192.05229532,3055631.2084190263],[12970099.285946386,3055527.591556321],[12970099.285946386,3055493.0527687375],[12969944.67536484,3055320.360192415],[12969913.753248535,3055285.8219047403],[12969882.83123234,3055285.8219047403],[12969728.22065079,3055285.8219047403],[12969697.298534475,3055251.2837003763],[12969666.376418175,3055251.2837003763],[12969666.376418175,3055216.7455793256],[12969418.9995878,3054940.443721848]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"GS\",\"binstrlen\":\"2514\"},{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"shuiku1\",\"regionid\":\"117001372010006\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12966728.776469996,3053317.277858411],[12966666.93223738,3053248.211026701],[12966666.93223738,3053213.6777357124],[12966110.334344026,3052592.0929545206]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"RS\",\"binstrlen\":\"2505\"},{\"reghighid\":\"\",\"username\":\"test\",\"rname\":\"shuiku2\",\"regionid\":\"117001372010006\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12963883.942770649,3051314.475559637],[12963543.799591351,3051314.475559637],[12962306.91533942,3051314.475559637]]]}\",\"binstrval\":\"0\",\"sid\":\"20150214HP001\",\"nodetype\":\"RS\",\"binstrlen\":\"2497\"}],\"extent\":12973995.471199816;12962306.91533942;3062195.1365455063;3051314.475559637}";

            /**/
            string jsonStr = "{\"features\":[{\"regionid\":\"239001\",\"shape\":\"{\"paths\":[[[6531903.816661476,6746836.402996627],[6531532.751365872,6746836.402996627],[6531378.140884436,6746836.402996627],[6531254.452419196,6746836.402996627],[6531007.075588834,6746836.402996627],[6530697.854525847,6746836.402996627],[6530481.399811794,6746836.402996627],[6530419.555579177,6746836.402996627],[6530388.633462869,6746836.402996627],[6530295.867214048,6746836.402996627],[6530264.945097739,6746836.402996627],[6529986.646151069,6746836.402996627],[6529955.724034761,6746786.506234743],[6529924.801918446,6746786.506234743],[6529893.879802137,6746736.609779214],[6529801.113453212,6746736.609779214],[6528687.917666516,6746736.609779214],[6528595.151317591,6746736.609779214],[6528533.307185079,6746736.609779214],[6528502.385068771,6746686.713791565],[6528471.462952462,6746686.713791565],[6528440.540836154,6746636.817948716],[6528409.618719844,6746636.817948716],[6528378.696603537,6746586.922412207],[6528193.164005792,6746586.922412207],[6528162.241889477,6746537.027182025],[6528131.319773168,6746537.027182025],[6527976.709291731,6746287.555625892],[6527914.865059114,6746287.555625892],[6527203.656584217,6745140.085571594],[6527141.812451712,6745140.085571594],[6526925.357637547,6744790.887721532],[6526894.4355212385,6744790.887721532],[6526832.591388733,6744691.1196165355],[6526801.669272419,6744691.1196165355],[6526677.980807184,6744491.587080212],[6526616.136574562,6744491.587080212],[6526585.214458252,6744491.587080212],[6526337.83762789,6744092.536862678],[6526337.83762789,6743294.495193139],[6526337.83762789,6743244.620169859],[6526337.83762789,6742895.5037361],[6526337.83762789,6742795.758891232],[6526337.83762789,6742396.791911029],[6526399.681860507,6742297.053184883],[6526399.681860507,6741898.11067759],[6526399.681860507,6741748.512223751],[6526399.681860507,6741249.870752064],[6526368.759744199,6741200.008270739],[6526368.759744199,6741050.422822996],[6526399.681860507,6741000.561564849],[6526399.681860507,6740900.839965867],[6526337.83762789,6740801.119589968],[6526337.83762789,6740601.682668665],[6526152.305030145,6740302.536216641],[6526152.305030145,6740103.111524289],[6526152.305030145,6740053.256075085],[6526121.382913836,6740003.400931571],[6526121.382913836,6739953.546093721],[6526090.460797529,6739903.691561561],[6526090.460797529,6739455.014688071],[6526090.460797529,6739155.910579588],[6526090.460797529,6739106.060937556],[6526090.460797529,6738657.428071687],[6526028.616564904,6738557.735204562],[6526028.616564904,6738458.043559585],[6526028.616564904,6738308.508544927],[6526152.305030145,6738109.132587384],[6526152.305030145,6737959.603826911],[6526214.149262762,6737859.919675374],[6526214.149262762,6737810.077977124],[6526214.149262762,6737710.395497002],[6526245.071379077,6737660.554715128],[6526245.071379077,6737610.714238709],[6526121.382913836,6737411.355548752],[6526090.460797529,6737411.355548752],[6526059.538681219,6737361.516599499],[6526059.538681219,6737311.677955667],[6526028.616564904,6737261.839617248],[6526059.538681219,6737212.0015842365],[6526059.538681219,6736962.816161504],[6525997.694548708,6736863.14406557],[6525997.694548708,6736813.30847565],[6525935.850316091,6736713.63821192],[6525935.850316091,6736663.803538091],[6525935.850316091,6736564.135106484],[6525812.161850851,6736364.802068641],[6525812.161850851,6736165.473754607],[6525874.0060834745,6736065.811590745],[6525874.0060834745,6735667.174501262],[6525874.0060834745,6735467.863444051],[6525874.0060834745,6735368.209666203],[6525812.161850851,6735268.557109241],[6525812.161850851,6735069.2558191605],[6525812.161850851,6735019.4312193105],[6525595.707136797,6734670.667726644],[6525533.86290418,6734670.667726644],[6525472.018671556,6734571.02371482],[6525410.174539051,6734571.02371482],[6525379.2524227435,6734521.202166632],[6525193.719724886,6734521.202166632],[6525039.109243449,6734272.099002682],[6525008.187127141,6734222.279446548],[6524977.265010832,6734222.279446548],[6524946.342894524,6734172.460034235],[6524791.732413086,6734172.460034235],[6524760.810296779,6734222.279446548],[6524698.966064162,6734222.279446548],[6524668.043947847,6734272.099002682],[6524637.121831538,6734272.099002682],[6524606.19971523,6734222.279446548],[6524575.277598921,6734222.279446548],[6524544.355582724,6734172.460034235],[6524451.589233792,6734172.460034235],[6524420.667117484,6734122.640927024],[6524266.056636047,6734122.640927024],[6524235.134519739,6734122.640927024],[6524173.290287121,6734023.0036278935],[6524173.290287121,6733923.36754913],[6524204.212403431,6733873.549967371],[6524080.523938189,6733674.282852324],[6524080.523938189,6733325.576863216],[6524111.446054499,6733275.763103314],[6524111.446054499,6733225.949487154],[6524204.212403431,6733076.510468725],[6524204.212403431,6733026.698072591]," +
               "[6524266.056636047,6732927.074195281],[6524296.978652244,6732927.074195281],[6524296.978652244,6732877.262714102],[6524266.056636047,6732827.451699168],[6524235.134519739,6732827.451699168],[6524204.212403431,6732777.640827931],[6524142.368170814,6732777.640827931],[6524049.601821882,6732628.210044037],[6524049.601821882,6732578.40039265],[6523956.835573069,6732428.973268152],[6523987.757689376,6732379.164997787],[6523987.757689376,6732179.934320527],[6524018.679705573,6732130.127413487],[6524018.679705573,6731781.487762551],[6524018.679705573,6731731.683294617],[6524049.601821882,6731681.879131545],[6524049.601821882,6731532.468471459],[6524142.368170814,6731383.060716232],[6524142.368170814,6730934.853588355],[6524204.212403431,6730835.255321323],[6524204.212403431,6730785.456644977],[6524235.134519739,6730735.658273406],[6524729.888180469,6730735.658273406],[6524822.6545293955,6730735.658273406],[6525162.797608577,6730735.658273406],[6525224.641841195,6730636.062444554],[6525441.096555249,6730636.062444554],[6525472.018671556,6730586.2649872545],[6525626.629253106,6730586.2649872545],[6525657.551369414,6730536.467995941],[6525688.473485729,6730536.467995941],[6525781.239734542,6730387.078366796],[6525874.0060834745,6730387.078366796],[6525935.850316091,6730287.486804359],[6525935.850316091,6730237.69148023],[6525966.772432399,6730187.896460824],[6525966.772432399,6730088.307336136],[6526028.616564904,6729988.719591473],[6526028.616564904,6729938.926095568],[6526059.538681219,6729889.132904365],[6526059.538681219,6729839.340017841],[6526121.382913836,6729739.755158828],[6526121.382913836,6729540.589257971],[6526214.149262762,6729391.21791027],[6526214.149262762,6729241.849304266],[6526245.071379077,6729192.060378184],[6526245.071379077,6728943.120478062],[6526368.759744199,6728743.973911681],[6526368.759744199,6727897.655688955],[6526368.759744199,6727150.977431624],[6526523.370325747,6726902.099793274],[6526523.370325747,6726852.325339926],[6526677.980807184,6726603.456833189],[6526677.980807184,6726454.139381495],[6527141.812451712,6725707.593529349],[6527172.734467909,6725707.593529349],[6527296.422933149,6725508.526112528],[6527327.345049459,6725508.526112528],[6527358.267165766,6725458.760180089],[6527451.033414586,6725458.760180089],[6527512.877647203,6725359.228905706],[6527605.643996134,6725359.228905706],[6527636.566112444,6725359.228905706],[6527729.332361257,6725359.228905706],[6527760.254477566,6725309.463724879],[6527914.865059114,6725309.463724879],[6527945.7871754235,6725259.698848264],[6527976.709291731,6725259.698848264],[6528007.631408046,6725209.9342759],[6528100.397656859,6725209.9342759],[6528131.319773168,6725160.170007751],[6528162.241889477,6725160.170007751],[6528224.086122099,6725160.170007751],[6528285.930354716,6725060.642384113],[6528378.696603537,6725060.642384113],[6528502.385068771,6724861.590948392],[6528811.606131757,6724861.590948392],[6528842.528248064,6724911.353391303],[6529028.060845809,6724612.783296575],[6529089.905078427,6724612.783296575],[6529151.749311051,6724513.2625261415],[6529120.827194736,6724463.502516611],[6529120.827194736,6724363.983409978],[6529089.905078427,6724314.224312879],[6529058.982962118,6724314.224312879],[6529028.060845809,6724264.465519915],[6528997.1387295015,6724264.465519915],[6528935.294496879,6724164.948846378],[6528966.216613194,6724115.190965792],[6528966.216613194,6724015.676278045],[6528997.1387295015,6723965.919309791],[6528997.1387295015,6723766.894477745],[6528997.1387295015,6723717.139029939],[6529028.060845809,6723667.383886217],[6529028.060845809,6723617.629207655],[6529089.905078427,6723518.120440551],[6529089.905078427,6723418.612889673],[6529089.905078427,6723219.6014364585],[6529120.827194736,6723169.849333237],[6529120.827194736,6723120.097695113],[6529151.749311051,6723070.346199921],[6529151.749311051,6722970.844121592],[6529182.671327247,6722921.093538439],[6529182.671327247,6722871.343259281],[6529120.827194736,6722771.843612935],[6529182.671327247,6722672.3453435935],[6529182.671327247,6722622.596584359],[6529213.593443556,6722572.848129088],[6529368.204025104,6722572.848129088],[6529399.126141413,6722523.099977782],[6529430.048257722,6722523.099977782],[6529491.892390227,6722423.604587039],[6529522.8145065345,6722423.604587039],[6529584.658739159,6722324.110412101],[6529646.502971774,6722324.110412101],[6529677.425088083,6722274.363780544],[6529708.347204392,6722274.363780544],[6529739.269220594,6722224.617613981],[6529739.269220594,6722174.871590279],[6529491.892390227,6721776.914502691],[6529491.892390227,6721727.171214149],[6529430.048257722,6721627.6855487125],[6529430.048257722,6721577.9431718],[6529368.204025104,6721478.459329569],[6529368.204025104,6721279.495452399],[6529275.437676172,6721130.275614045],[6529244.515559864,6721130.275614045],[6529182.671327247,6721030.797240935],[6529151.749311051,6721030.797240935],[6529120.827194736,6720981.058510102],[6528935.294496879,6720981.058510102],[6528749.761899133,6720682.632665927],[6528718.839782824,6720682.632665927],[6528595.151317591,6720483.688071435],[6528378.696603537,6720483.688071435],[6528316.852370914,6720583.159761138],[6528285.930354716,6720533.423764402],[6528193.164005792,6720533.423764402],[6528162.241889477,6720483.688071435],[6528409.618719844,6720085.8136236025],[6528440.540836154,6720085.8136236025],[6528471.462952462,6720135.546886637],[6528533.307185079,6720036.080664289],[6528564.229301388,6720036.080664289],[6528595.151317591,6719986.34800868],[6528626.073433899,6719986.34800868],[6528656.995550207,6719936.6156568],[6528718.839782824,6719936.6156568],[6528749.761899133,6719886.883769625],[6528842.528248064,6719886.883769625],[6529028.060845809,6719588.497858075],[6529058.982962118,6719588.497858075],[6529244.515559864,6719290.123039699],[6529244.515559864,6719240.394939246],[6529306.359792481,6719140.939649251],[6529337.281908789,6719091.212459696],[6529337.281908789,6719041.485573754],[6529306.359792481,6718991.759152435],[6529306.359792481,6718842.581227147],[6529368.204025104,6718743.130794951],[6529368.204025104,6718693.4060342405],[6529491.892390227,6718494.510188178],[6529646.502971774,6718494.510188178],[6529677.425088083,6718444.786945337],[6529708.347204392,6718444.786945337],[6529770.191336904,6718345.341370325],[6529770.191336904,6718245.897009514],[6529862.957685829,6718096.732744834],[6529986.646151069,6718096.732744834],[6530110.334516192,6717897.851468902],[6530110.334516192,6717848.131868451],[6530203.100865124,6717698.974888082],[6530574.166160726,6717698.974888082],[6530605.088176922,6717649.25650161],[6530636.010293231,6717649.25650161],[6530790.620874779,6717649.25650161],[6530821.542991089,6717599.538579578],[6530945.231356217,6717599.538579578],[6530976.153472524,6717549.8208000595],[6531439.985117054,6717549.8208000595],[6531903.816661476,6717549.8208000595],[6531934.738777784,6717500.103324008],[6532213.037724454,6717500.103324008],[6532274.881957078,6717400.669282311],[6532769.635617802,6717400.669282311],[6532800.557734111,6717350.952716653],[6533202.5450459095,6717350.952716653],[6533233.467162224,6717301.236454444],[6533604.532457821,6717301.236454444],[6533635.454574136,6717251.520495682],[6533728.2209230615,6717251.520495682],[6533790.065055567,6717152.08964943],[6533820.987171882,6717152.08964943],[6533851.909288189,6717152.08964943],[6533913.753520806,6717052.659855964],[6534037.441885935,6717052.659855964],[6534346.662948915,6717052.659855964],[6534408.507181538,6716953.231276183],[6534470.351414154,6716953.231276183],[6534501.273530464,6716903.517441415],[6534501.273530464,6716853.803910048]," +
               "[6534346.662948915,6716605.240965156],[6534346.662948915,6716555.529254136],[6534377.585065223,6716505.817846501],[6534315.740932719,6716406.395941328],[6534253.896700101,6716406.395941328],[6534099.286118552,6716157.846648037],[6534037.441885935,6716157.846648037],[6533573.6103415135,6715412.243944127],[6533511.766108897,6715412.243944127],[6533418.999860082,6715263.131720676],[6533264.389278534,6715263.131720676],[6533233.467162224,6715213.42819906],[6533078.856680789,6715213.42819906],[6533047.93456448,6715163.724980683],[6532738.713501494,6714666.709635092],[6532707.791385186,6714617.009752062],[6532738.713501494,6714567.310172217],[6532738.713501494,6714517.610895556],[6532769.635617802,6714467.911922067],[6532862.401966734,6714467.911922067],[6533109.778797097,6714070.331208727],[6533109.778797097,6714020.63496359],[6533295.311394841,6713722.464019115],[6533357.155627459,6713722.464019115],[6533388.077743767,6713672.769895759],[6533449.921976391,6713672.769895759],[6533573.6103415135,6713473.996594073],[6533573.6103415135,6713175.845492287],[6533820.987171882,6712778.327821001],[6533820.987171882,6712480.202334068],[6533820.987171882,6712231.772626106],[6533820.987171882,6712182.087593369],[6533944.675637116,6711983.3506527515],[6534130.2082348615,6711983.3506527515],[6534161.130351169,6712033.034473721],[6534222.974583792,6712033.034473721],[6534253.896700101,6712082.718597621],[6534408.507181538,6712082.718597621],[6534624.961895592,6712430.5157865435],[6534717.728244517,6712430.5157865435],[6534748.650360826,6712480.202334068],[6534779.572477141,6712430.5157865435],[6534872.338826066,6712430.5157865435],[6534934.182958571,6712331.143600403],[6534996.027191195,6712331.143600403],[6535026.949307503,6712380.829541992],[6535119.715656429,6712380.829541992],[6535150.637772736,6712430.5157865435],[6535212.481905249,6712430.5157865435],[6535243.4040215565,6712480.202334068],[6535367.092486797,6712480.202334068],[6535398.014603106,6712529.889184578],[6535398.014603106,6712579.576177191],[6535428.936719414,6712629.263633655],[6535552.625084542,6712629.263633655],[6535583.547200851,6712579.576177191],[6535614.46931716,6712579.576177191],[6535676.313549777,6712480.202334068],[6535707.235666084,6712480.202334068],[6535830.924031214,6712281.457961774],[6535985.534612762,6712281.457961774],[6536109.222977884,6712082.718597621],[6536140.145094199,6712082.718597621],[6536171.067210507,6712033.034473721],[6536263.833559433,6712033.034473721],[6536294.7556757415,6711983.3506527515],[6536356.599808252,6711983.3506527515],[6536387.521924562,6711933.667134714],[6536511.210389795,6711933.667134714],[6536542.13250611,6711883.983919581],[6536542.13250611,6711834.301007383],[6536418.444040869,6711635.572548493],[6536387.521924562,6711635.572548493],[6536325.677792056,6711536.210055984],[6536171.067210507,6711536.210055984],[6536140.145094199,6711585.891150785],[6536078.300861577,6711585.891150785],[6536047.378745267,6711536.210055984],[6535985.534612762,6711536.210055984],[6535800.001914904,6711238.1298475135],[6535800.001914904,6711039.415926516],[6536109.222977884,6710542.652080436],[6536418.444040869,6710542.652080436],[6536449.366157179,6710492.977345147],[6536480.288273486,6710492.977345147],[6536603.976738727,6710294.281431742],[6536696.7429875415,6710294.281431742],[6536789.509336472,6710145.2628365215],[6537036.886166834,6710145.2628365215],[6537562.561943874,6710145.2628365215],[6537624.406176492,6710145.2628365215],[6537655.328292799,6710194.93545245],[6537686.250409114,6710145.2628365215],[6537902.705123168,6710145.2628365215],[6537995.471472094,6709996.246805195],[6538273.770418772,6709996.246805195],[6538335.6146513885,6709896.904297982],[6538737.601963187,6709896.904297982],[6538892.212544736,6709648.553488314],[6539232.355623918,6709648.553488314],[6539294.199856535,6709549.21521905],[6539417.8883217685,6709549.21521905],[6539541.576686897,6709350.542312726],[6539572.498803206,6709350.542312726],[6539727.109384754,6709102.208150639],[6539912.6419824995,6709102.208150639],[6539974.486215116,6709102.208150639],[6540036.330447739,6709002.876540032],[6540067.252463937,6709002.876540032],[6540190.940929171,6708804.217111196],[6540221.863045485,6708804.217111196],[6540376.4735269165,6708555.899432959],[6540407.395643231,6708555.899432959],[6540654.772473594,6708158.607043051],[6540685.694589902,6708158.607043051],[6540963.993536572,6707711.676229446],[6540994.915652887,6707711.676229446],[6541025.837769196,6707662.018744902],[6541056.759885504,6707662.018744902],[6541489.669413724,6706966.846043487],[6541520.59142992,6706966.846043487],[6541551.513546229,6706966.846043487],[6541829.812492906,6706519.980563861],[6541829.812492906,6706470.330338069],[6541829.812492906,6706321.381475003],[6541922.578841832,6706172.435333284],[6541922.578841832,6706122.787224108],[6541891.656725524,6706073.139578015],[6541891.656725524,6705725.613395706],[6541891.656725524,6705675.968007522],[6541922.578841832,6705626.3230823865],[6541953.5009581465,6705626.3230823865],[6541953.5009581465,6705576.678298825],[6542046.267307071,6705427.74576193],[6542108.111439576,6705427.74576193],[6542169.9556722,6705328.458915425],[6542200.877788509,6705328.458915425],[6542664.709332924,6704583.846425623],[6542819.319914474,6704335.657266174],[6542881.164147091,6704335.657266174],[6542912.086263404,6704286.020340847],[6542943.008279602,6704286.020340847],[6543066.696744836,6704087.475821904],[6543097.618861144,6704087.475821904],[6543159.463093767,6703988.205295037],[6543344.995691512,6703988.205295037],[6543375.917807821,6703938.570484822],[6543406.83992413,6703938.570484822],[6543654.216754491,6703541.503040426],[6543685.138870806,6703541.503040426],[6543808.827235929,6703342.976649155],[6543901.593584862,6703342.976649155],[6544025.282050095,6703144.454930508],[6544025.282050095,6703094.825256018],[6544056.204166404,6703045.195883583],[6544056.204166404,6702995.566813207],[6544458.191478202,6702350.416704214],[6544489.113594517,6702350.416704214],[6544520.0357108265,6702300.791862069],[6544489.113594517,6702251.1673218915],[6544489.113594517,6702102.295513229],[6544520.0357108265,6702052.672180936],[6544489.113594517,6702003.049150603],[6544365.425129277,6702003.049150603],[6544334.503113081,6701953.426582871],[6544303.580996771,6701953.426582871],[6544272.658880464,6701903.804156422],[6543685.138870806,6701903.804156422],[6543468.684156747,6701903.804156422],[6543437.762040439,6701854.182031929],[6543066.696744836,6701854.182031929],[6542973.93039591,6701705.317470039],[6543252.229342582,6701258.740248274],[6543623.294638184,6701258.740248274],[6543685.138870806,6701159.504150757],[6543685.138870806,6701060.269260712],[6543592.3725218745,6700911.419350208],[6543592.3725218745,6700861.80326353],[6543561.450405567,6700812.187478688],[6543561.450405567,6700762.571995681],[6543530.5282892585,6700712.956814509],[6543530.5282892585,6700663.341935144],[6543499.606172949,6700613.727357618],[6543499.606172949,6700514.49926863],[6543221.307226272,6700067.987244798],[6543221.307226272,6699968.765634439],[6543159.463093767,6699869.545231093],[6543159.463093767,6699819.935482034],[6542819.319914474,6699274.248316665],[6542819.319914474,6699125.430996746],[6542695.631449234,6698927.011912765],[6542541.020967802,6698927.011912765],[6542479.1767351795,6698827.804180696],[6542479.1767351795,6698728.597815792],[6542602.865200419,6698530.188384344],[6542602.865200419,6698331.783778693],[6542633.787316728,6698282.183541862],[6542633.787316728,6697637.405978808],[6542633.787316728,6697538.213929084],[6542664.709332924,6697488.61835651],[6542664.709332924,6697389.428115878]," +
               "[6542819.319914474,6697141.457951052],[6542850.242030782,6697141.457951052],[6542881.164147091,6697091.864790425],[6542973.93039591,6697091.864790425],[6543004.852512219,6697141.457951052],[6543066.696744836,6697141.457951052],[6543097.618861144,6697091.864790425],[6543499.606172949,6697091.864790425],[6543530.5282892585,6697042.271931277],[6543530.5282892585,6696893.495323154],[6543839.749352237,6696397.592515184],[6543870.671468547,6696397.592515184],[6544087.126182606,6696050.4783711],[6544118.048298914,6696050.4783711],[6544210.814647839,6696050.4783711],[6544241.736764149,6696000.891841744],[6544550.957827134,6696000.891841744],[6544581.879943442,6695951.305774301],[6544612.802059751,6695951.305774301],[6544736.490424879,6695752.963875958],[6544736.490424879,6695653.794734843],[6545107.555720482,6695058.8055198435],[6545107.555720482,6694910.0649148375],[6545014.789371551,6694761.327021166],[6544705.568308571,6694761.327021166],[6544674.646192262,6694711.748325775],[6544612.802059751,6694711.748325775],[6544179.892531532,6694017.678539388],[6544179.892531532,6693918.530485987],[6543870.671468547,6693422.808448493],[6543870.671468547,6693323.667622434],[6543777.905219732,6693174.958802105],[6543777.905219732,6692927.116522521],[6543839.749352237,6692827.981718192],[6543839.749352237,6692728.848278568],[6543932.515701169,6692580.150136259],[6543932.515701169,6692530.584690899],[6543932.515701169,6692034.946953526],[6543777.905219732,6691787.139452123],[6543777.905219732,6691588.898739873],[6543808.827235929,6691539.339314167],[6543808.827235929,6691489.780189397],[6543777.905219732,6691440.2213655505],[6543777.905219732,6691390.663003071],[6543746.983103424,6691341.104781059],[6543746.983103424,6691291.546859965],[6543716.060987116,6691241.989239778],[6543561.450405567,6691489.780189397],[6543375.917807821,6691489.780189397],[6543344.995691512,6691539.339314167],[6543283.151458889,6691539.339314167],[6543159.463093767,6691737.578822641],[6543097.618861144,6691737.578822641],[6542912.086263404,6692034.946953526],[6542912.086263404,6692084.509388818],[6542850.242030782,6692183.635162361],[6542726.553565547,6692183.635162361],[6542695.631449234,6692233.198500624],[6542571.943084111,6692233.198500624],[6542510.098851489,6692332.325919695],[6542479.1767351795,6692332.325919695],[6542448.254618871,6692282.762139888],[6542417.332502562,6692282.762139888],[6542077.189323269,6691737.578822641],[6541706.124127777,6691737.578822641],[6541273.214599559,6691043.761768011],[6541273.214599559,6690994.205652293],[6541211.370366941,6690895.09448393],[6541211.370366941,6690845.539270835],[6541149.526234429,6690746.429747228],[6541056.759885504,6690746.429747228],[6540654.772473594,6690102.247335884],[6540685.694589902,6690052.696936045],[6540376.4735269165,6689557.209640597],[6540376.4735269165,6689111.296804077],[6539603.420919514,6687872.7778564915],[6539572.498803206,6687872.7778564915],[6539417.8883217685,6687625.096676702],[6539325.121972844,6687625.096676702],[6538706.679846879,6686634.446768681],[6538644.835614255,6686634.446768681],[6537964.549355784,6685544.87064671],[6537933.627239477,6685544.87064671],[6537902.705123168,6685544.87064671],[6537871.783006859,6685495.347899179],[6537809.9387742365,6685495.347899179],[6537531.639827566,6685049.656846669],[6537593.484060182,6684950.617818699],[6537593.484060182,6684752.543045558],[6537377.029346129,6684405.923913212],[6537377.029346129,6684207.862351336],[6537253.3408808885,6684009.805753297],[6537253.3408808885,6683960.292314229],[6536851.353569089,6683316.645082646],[6536851.353569089,6683267.135845868],[6536294.7556757415,6682376.0212219665],[6536294.7556757415,6682277.014451716],[6536232.9114431245,6682178.009041868],[6536232.9114431245,6682128.50670685],[6535892.76826383,6681584.000982002],[6535892.76826383,6681336.510305957],[6535861.846147521,6681287.013070592],[6535861.846147521,6681089.027288698],[6535830.924031214,6681039.531552969],[6535830.924031214,6680940.540981243],[6535830.924031214,6680742.563596827],[6535830.924031214,6680594.083587141],[6535800.001914904,6680544.590850322],[6535800.001914904,6680495.098413358],[6535800.001914904,6680445.606276269],[6535738.157782399,6680346.623061872],[6535738.157782399,6680198.150248755],[6535707.235666084,6680148.659910724],[6535738.157782399,6680099.169872514],[6535738.157782399,6679950.701556798],[6535738.157782399,6679901.212878071],[6535800.001914904,6679802.236099565],[6535800.001914904,6679703.260520235],[6535769.079798597,6679653.773180247],[6535769.079798597,6679604.286140041],[6535800.001914904,6679554.799399598],[6535800.001914904,6679406.3411371],[6535521.702968227,6678960.982215374],[6535490.780851919,6678911.499371558],[6535490.780851919,6678862.016827448],[6535181.559889051,6678367.208029354],[6535181.559889051,6678317.7287816955],[6534717.728244517,6677575.576342427],[6534717.728244517,6677476.627734309],[6534686.8061282085,6677427.153879602],[6534655.8840119,6677476.627734309],[6534624.961895592,6677476.627734309],[6533140.700913406,6675102.221333001],[6533109.778797097,6675102.221333001],[6531563.6734821815,6672629.614667534],[6531470.90713325,6672629.614667534],[6531409.063000744,6672530.726086075],[6531347.218768127,6672530.726086075],[6531037.997705142,6672036.300483013],[6530945.231356217,6672036.300483013],[6530883.387123594,6671937.418919038],[6530852.465107396,6671937.418919038],[6530790.620874779,6671838.538551177],[6530666.932409539,6671838.538551177],[6530574.166160726,6671690.220242057],[6530512.321928109,6671690.220242057],[6530481.399811794,6671640.781563766],[6530450.477695486,6671640.781563766],[6530419.555579177,6671591.343024416],[6530388.633462869,6671591.343024416],[6530326.789230252,6671492.466842695],[6530295.867214048,6671492.466842695],[6530203.100865124,6671344.154812533],[6530172.178748814,6671344.154812533],[6530079.412399882,6671195.845473135],[6530048.490283574,6671195.845473135],[6529955.724034761,6671047.538984428],[6529924.801918446,6671047.538984428],[6529862.957685829,6670948.669379997],[6529832.035569521,6670948.669379997],[6529708.347204392,6670750.93375831],[6529615.580855466,6670750.93375831],[6529584.658739159,6670701.50076024],[6529553.7366228495,6670701.50076024],[6529491.892390227,6670602.635340744],[6529213.593443556,6670602.635340744],[6528904.37238057,6670108.326336661],[6528873.450364374,6670108.326336661],[6528842.528248064,6670058.897064032],[6528811.606131757,6670058.897064032],[6528780.684015448,6670058.897064032],[6528749.761899133,6670009.468090251],[6528749.761899133,6669861.1829619575],[6528780.684015448,6669811.755343557],[6528780.684015448,6669712.900683174],[6528842.528248064,6669614.047218047],[6528842.528248064,6669416.343873471],[6528780.684015448,6669317.49415393],[6528780.684015448,6669268.06966233],[6528749.761899133,6669218.645469501],[6528749.761899133,6669020.951685818],[6528749.761899133,6668971.5289867865],[6528347.774487222,6668329.061403413],[6528347.774487222,6668279.642886379],[6528193.164005792,6668032.554781265],[6528193.164005792,6667983.138216217],[6527358.267165766,6666648.999833973],[6527389.189282075,6666599.591629281],[6527389.189282075,6666451.3683263855],[6527420.11139839,6666401.961155764],[6527420.11139839,6665907.906026046],[6527512.877647203,6665759.695259128],[6527512.877647203,6665710.29226703],[6527605.643996134,6665562.085241235],[6527605.643996134,6665463.281942838],[6527110.890335404,6664672.898842797]]],\"spatialReference\":{\"wkid\":102100}}\",\"sid\":\"20160124HP001\",\"reghighid\":\"\",\"rname\":\"\",\"nodetype\":\"GS\",\"binstrlen\":\"1816\",\"username\":\"\",\"binstrval\":\"0\"},{\"regionid\":\"239001\",\"shape\":\"{\"paths\":[[[6587501.762364242," +
               "7148486.467259807],[6587501.762364242,7148066.770020351],[6587470.840247927,7148014.309434041],[6587408.99601531,7148014.309434041],[6587378.073899002,7147961.849366139],[6587316.229766496,7147961.849366139],[6587099.774952332,7147594.637461167],[6587099.774952332,7147437.266328144],[6587068.852936129,7147384.809924197],[6587068.852936129,7147332.353868745],[6587099.774952332,7147279.898161783],[6587099.774952332,7147017.625023859],[6587161.619184948,7146912.718139965],[6587223.4634175645,7146807.812649817],[6587099.774952332,7146598.005850634],[6587099.774952332,7146440.6545793135],[6587161.619184948,7146335.755360511],[6587192.541301257,7146335.755360511],[6587130.69706864,7146230.85753521],[6587099.774952332,7146230.85753521],[6587037.93081982,7146125.961103348],[6587007.008703511,7146125.961103348],[6586976.086587202,7146073.513409953],[6586976.086587202,7146021.066234707],[6587007.008703511,7145968.619237995],[6587068.852936129,7145968.619237995],[6587130.69706864,7145863.726289576],[6587099.774952332,7145811.280337839],[6587099.774952332,7145758.8347344315],[6587068.852936129,7145706.389479333],[6587068.852936129,7145444.168598083],[6587099.774952332,7145391.725432725],[6587099.774952332,7144762.434781563],[6587130.69706864,7144709.996143252],[6587130.69706864,7144657.557853135],[6587161.619184948,7144605.1199112125],[6587161.619184948,7144552.682487238],[6587007.008703511,7144290.499741019],[6587007.008703511,7143766.160528607],[6586945.164470894,7143661.296829419],[6586945.164470894,7143608.865671694],[6586388.566577546,7142665.161461228],[6586388.566577546,7142560.312548631],[6586079.345514561,7142036.088183037],[6586079.345514561,7141878.827606657],[6585986.579165635,7141721.570161176],[6585955.657049327,7141669.151878121],[6585986.579165635,7141616.733773208],[6585986.579165635,7141564.31601614],[6585955.657049327,7141511.898606919],[6585955.657049327,7141249.816778238],[6585862.890800507,7141092.572024464],[6585862.890800507,7141040.15774556],[6585955.657049327,7140882.916995524],[6585955.657049327,7140830.504107726],[6585986.579165635,7140778.091567683],[6585708.280218957,7140306.3945252355],[6585677.358102649,7140306.3945252355],[6585646.4360864535,7140253.985462471],[6585770.124451581,7140044.352858011],[6585801.04656789,7139991.945533672],[6585708.280218957,7139834.725646632],[6585553.669737527,7139834.725646632],[6585460.903388596,7139677.509058109],[6585460.903388596,7139625.104167322],[6585337.215023467,7139415.488080349],[6585244.448674542,7139415.488080349],[6585182.604441925,7139310.682122504],[6585120.7602093015,7139310.682122504],[6585089.838092993,7139258.279664962],[6584966.149727872,7139258.279664962],[6584780.617130126,7138943.872388499],[6584626.006548577,7138943.872388499],[6584595.084432269,7138891.472363943],[6584440.473950832,7138891.472363943],[6584038.48653892,7138210.304008334],[6584038.48653892,7138157.90884886],[6584007.564422612,7138105.514036855],[6583976.642306297,7138105.514036855],[6583883.876057484,7137948.331685531],[6583822.031824867,7137948.331685531],[6583791.109708552,7137895.938263312],[6583760.187592244,7137895.938263312],[6583698.343359627,7137791.152630795],[6583605.577110812,7137791.152630795],[6583543.7328781895,7137686.368218342],[6583265.433931519,7137686.368218342],[6583234.51181521,7137633.976533219],[6583018.057101157,7137633.976533219],[6582863.446519608,7137895.938263312],[6582770.680270787,7137895.938263312],[6582677.913921862,7137895.938263312],[6582616.069689239,7137791.152630795],[6582461.459207809,7137791.152630795],[6582430.537091494,7137843.545188531],[6582368.692858877,7137843.545188531],[6582337.770742569,7137895.938263312],[6582183.160261132,7137895.938263312],[6582152.238144822,7137843.545188531],[6582121.316028514,7137843.545188531],[6582090.393912206,7137791.152630795],[6582059.471795897,7137791.152630795],[6581873.939198152,7137476.803562293],[6581873.939198152,7137424.413266762],[6581781.172849219,7137267.24463404],[6581750.250732912,7137214.855728001],[6581750.250732912,7136900.529586041],[6581688.406500295,7136795.757153636],[6581688.406500295,7136743.371373599],[6581719.328616604,7136690.985940872],[6581688.406500295,7136638.60085543],[6581688.406500295,7136481.4476828715],[6581750.250732912,7136376.6806375515],[6581843.017081837,7136376.6806375515],[6581904.861314462,7136271.915150871],[6582028.549679582,7136271.915150871],[6582121.316028514,7136114.769270855],[6582152.238144822,7136114.769270855],[6582183.160261132,7136062.3880053265],[6582245.004393637,7136062.3880053265],[6582368.692858877,7135852.866585019],[6582801.602286984,7135852.866585019],[6582832.524403299,7135800.4870555755],[6583018.057101157,7135800.4870555755],[6583079.901233662,7135695.729038282],[6583079.901233662,7135538.594616236],[6583141.745466279,7135433.84007074],[6583141.745466279,7135329.0870834375],[6583079.901233662,7135224.335315168],[6583048.979217464,7135224.335315168],[6582987.134984842,7135119.584935439],[6582956.212868534,7135119.584935439],[6582925.290752225,7135067.210266261],[6582956.212868534,7135014.835944194],[6582956.212868534,7134962.461969248],[6583203.589698896,7134543.482834578],[6583203.589698896,7134491.111983378],[6583203.589698896,7134438.741479235],[6583172.667582587,7134386.371491692],[6583172.667582587,7134176.894333663],[6583141.745466279,7134124.525911719],[6583141.745466279,7134072.157836793],[6583079.901233662,7133967.422727941],[6583079.901233662,7133129.592159709],[6583079.901233662,7132920.1484794235],[6583079.901233662,7132501.277429654],[6582987.134984842,7132344.206678387],[6582987.134984842,7132134.783639423],[6582863.446519608,7131925.366318609],[6582832.524403299,7131873.0128129665],[6582801.602286984,7131873.0128129665],[6582739.758154479,7131768.306841971],[6582708.836038171,7131768.306841971],[6582677.913921862,7131715.95437659],[6582770.680270787,7131558.89906093],[6582770.680270787,7131506.547982506],[6582801.602286984,7131454.197420294],[6582925.290752225,7131244.797960575],[6582956.212868534,7131244.797960575],[6582987.134984842,7131192.448962394],[6583079.901233662,7131192.448962394],[6583141.745466279,7131087.75200609],[6583172.667582587,7131087.75200609],[6583234.51181521,7130983.056605948],[6583265.433931519,7130983.056605948],[6583296.356047827,7130930.709341148],[6583327.278164136,7130930.709341148],[6583358.200180332,7130878.362423],[6583389.122296642,7130878.362423],[6583420.044412955,7130826.015851504],[6583420.044412955,7130721.32374844],[6583450.966529264,7130668.978216865],[6583450.966529264,7130616.63303192],[6582894.368635916,7129674.479308674],[6582739.758154479,7129674.479308674],[6582461.459207809,7129674.479308674],[6582430.537091494,7129674.479308674],[6582337.770742569,7129517.464717332],[6582306.84862626,7129517.464717332],[6582275.926509952,7129465.127156743],[6582245.004393637,7129465.127156743],[6582183.160261132,7129360.4530750355],[6581781.172849219,7129360.4530750355],[6581750.250732912,7129308.11655392],[6581750.250732912,7129255.780379276],[6581781.172849219,7129203.444551104],[6581781.172849219,7129098.773934146],[6581812.094965529,7129046.439314788],[6581812.094965529,7128994.104872448],[6581719.328616604,7128837.103624051],[6581533.7960188575,7128837.103624051],[6581317.341304804,7128470.77967181],[6581224.574955872,7128470.77967181],[6581162.730723254,7128366.118754584],[6581317.341304804,7128104.472522966],[6581317.341304804,7127319.586115555],[6581379.18543731,7127214.940436184],[6581008.120241819,7126587.095781632],[6580760.743411456,7126587.095781632],[6580698.899178839,7126482.459796131],[6580698.899178839,7126377.825195279],[6580729.821295147,7126325.508414087],[6580729.821295147,7126220.875890135],[6580822.587543962,7126063.929869571],[6580853.509660269,7126063.929869571],[6581008.120241819,7125802.3598086],[6581008.120241819,7125331.555671275],[6581069.964374324,7125226.93629855],[6581069.964374324,7125174.627300584],[6581131.808606947,7125070.010003981],[6581131.808606947,7125017.701874696],[6581100.886490639,7124965.39409141],[6581100.886490639,7124913.086654119],[6580977.19812551,7124703.860364788],[6580977.19812551,7124651.554826731],[6581100.886490639,7124442.335456657],[6581193.652839564,7124442.335456657],[6581224.574955872,7124390.031478997],[6581286.419188497,7124390.031478997],[6581348.263421112,7124285.42456147],[6581719.328616604,7124285.42456147],[6581781.172849219,7124180.819196941],[6581781.172849219,7124128.516948878],[6581873.939198152,7123971.612280084],[6581873.939198152,7123814.710724237],[6581966.705446966,7123657.812450535],[6581966.705446966,7123553.215217772],[6582028.549679582,7123448.619368357],[6582028.549679582,7123344.024902254],[6582028.549679582,7123291.728187934],[6581997.627563274,7123239.431819416],[6581997.627563274,7122977.955333074],[6582368.692858877,7122350.446796416],[6582399.614975184,7122298.156651473],[6582430.537091494,7122298.156651473],[6582646.991805554,7121932.135485409],[6582646.991805554,7121775.274553093],[6583018.057101157,7121147.861422118],[6583296.356047827,7121147.861422118],[6583327.278164136,7121095.579226785],[6583358.200180332,7121095.579226785],[6583543.7328781895,7120781.8934807135],[6583574.654994499,7120781.8934807135],[6583605.577110812,7120729.613704221],[6583698.343359627,7120729.613704221],[6583791.109708552,7120729.613704221],[6583822.031824867,7120677.33427325],[6583883.876057484,7120677.33427325],[6583945.72018999,7120572.776447848],[6584100.3307715375,7120572.776447848],[6584131.252887846,7120520.4980534185],[6584193.097120469,7120520.4980534185],[6584224.019136666,7120468.220004493],[6584285.863369282,7120468.220004493],[6584564.162315954,7119997.73328001],[6584595.084432269,7119997.73328001],[6584718.772897502,7119788.63714493],[6584780.617130126,7119788.63714493],[6585368.13703967,7119788.63714493],[6585491.825504905,7119997.73328001],[6585553.669737527,7119997.73328001],[6585708.280218957,7119997.73328001],[6585739.202335272,7120050.008219679],[6586110.2676308695,7120050.008219679],[6586172.111863492,7120154.559135379],[6586264.878112307,7120154.559135379],[6586295.800228614,7120206.835111414],[6586419.488693855,7120206.835111414],[6586512.254942675,7120050.008219679],[6586543.177058983,7120050.008219679],[6586574.099175292,7119997.73328001],[6586697.787640526,7119997.73328001],[6586728.70975684,7119945.45868578],[6586759.631873149,7119945.45868578],[6586790.553989457,7119893.184436979],[6586883.320238272,7119893.184436979],[6586914.242354587,7119945.45868578],[6587161.619184948,7119945.45868578],[6587192.541301257,7119893.184436979],[6587470.840247927,7119893.184436979],[6587532.684480552,7119788.63714493],[6587625.450829476,7119788.63714493],[6587718.2170782965,7119631.818543637],[6587749.139194605,7119631.818543637],[6587780.0613109125,7119579.546367344],[6587810.983427222,7119579.546367344],[6587934.671892461,7119370.4611161295],[6588305.737087952,7119370.4611161295],[6588367.58132057,7119265.92073201],[6588707.724499864,7119265.92073201],[6588738.646616172,7119213.650973388],[6589418.932874649,7119213.650973388],[6589449.854990957,7119161.381560121],[6589480.777107265,7119161.381560121],[6589511.699223574,7119109.112492211],[6589604.465572506,7119109.112492211],[6589635.387688814,7119056.843769642],[6589666.30970501,7119056.843769642],[6589697.231821319,7119004.575392412],[6589728.153937628,7119004.575392412],[6589789.9981702445,7118900.039673939],[6589789.9981702445,7118690.972550057],[6589820.9202865595,7118638.706590048],[6589944.608751793,7118638.706590048],[6590037.375000614,7118481.910781731],[6590099.21923323,7118481.910781731],[6590130.141349539,7118534.175705884],[6590191.985582162,7118534.175705884],[6590315.673947284,7118325.118250122],[6590315.673947284,7118168.328656617],[6590315.673947284,7118116.066149274],[6593964.482470464,7111951.514795137],[6593964.482470464,7111481.534182948],[6593964.482470464,7110332.810077671],[6593964.482470464,7110019.550692167],[6593964.482470464,7109967.341971639],[6593964.482470464,7109915.13359544],[6593964.482470464,7109706.303533861],[6593964.482470464,7109236.456205619],[6593964.482470464,7108975.44203638],[6593964.482470464,7108505.6380821895],[6593964.482470464,7107200.77339598],[6593964.482470464,7107044.204023758],[6593964.482470464,7106522.3286451725],[6593964.482470464,7106470.142982248],[6593964.482470464,7106261.4039389575],[6593964.482470464,7105322.145744517],[6593964.482470464,7105269.968159871],[6593964.482470464,7105165.613684142],[6593964.482470464,7104800.384017555],[6593964.482470464,7104278.656498004],[6593964.482470464,7103965.636383163],[6593964.482470464,7103756.963348998],[6593964.482470464,7102452.880725536],[6593964.482470464,7102087.776141624],[6593964.482470464,7102035.619693699],[6593964.482470464,7101774.8427746985],[6593964.482470464,7101461.921602386],[6593964.482470464,7101253.314524336],[6593964.482470464,7101149.012961145],[6593964.482470464,7101044.712771403],[6593964.482470464,7100836.11668088],[6593964.482470464,7100106.073198667],[6593964.482470464,7099480.375382334],[6593964.482470464,7098958.998172704],[6593964.482470464,7098489.788037792],[6593964.482470464,7098385.522855308],[6593964.482470464,7097342.946832786],[6593933.560354155,7097290.821616056],[6593933.560354155,7097238.696742258],[6592294.688690308,7094476.570033852],[6592294.688690308,7094372.357648893],[6592294.688690308,7094320.251970349],[6592263.766573999,7094268.146634409],[6592263.766573999,7094216.041641071],[6592232.844557802,7094163.937159025],[6592232.844557802,7093903.41904408],[6592171.000325184,7093799.2141960915],[6592171.000325184,7093590.808779351],[6591583.480315529,7092600.957422229],[6590995.960305872,7092600.957422229],[6590748.583475504,7092600.957422229],[6590593.972893962,7092861.432555283],[6589666.30970501,7092861.432555283],[6588986.023446535,7092861.432555283],[6588676.802383555,7092861.432555283],[6588645.880267247,7092861.432555283],[6588182.048722824,7092861.432555283],[6587810.983427222,7092861.432555283],[6587501.762364242,7092861.432555283],[6587223.4634175645,7092861.432555283],[6585893.812916814,7092861.432555283],[6585275.370790849,7092861.432555283],[6584440.473950832,7092861.432555283],[6584378.629718214,7092757.2414072845],[6584347.707601899,7092757.2414072845],[6583852.953941175,7092757.2414072845],[6583760.187592244,7092600.957422229],[6583048.979217464,7092600.957422229],[6582121.316028514,7092600.957422229],[6581348.263421112,7092600.957422229],[6581131.808606947,7092600.957422229],[6581100.886490639,7092600.957422229],[6581069.964374324,7092548.863389168],[6581069.964374324,7092496.769698528],[6581039.0423581265,7092444.676350276],[6581039.0423581265,7092184.214913673],[6581069.964374324,7092132.123619758],[6581069.964374324,7092080.032668223],[6581100.886490639,7092080.032668223],[6581502.873902549,7092080.032668223],[6581533.7960188575,7092027.9420590475],[6581471.9517862415,7091923.761867765],[6581471.9517862415,7091871.672285643],[6581410.107553617,7091767.494317046],[6581441.0296699265,7091715.405761925],[6581471.9517862415,7091715.405761925],[6581502.873902549,7091663.317549127],[6581595.640251474,7091663.317549127],[6581626.562367784,7091611.22967865],[6581688.406500295,7091611.22967865],[6581812.094965529,7091402.881619773],[6581904.861314462,7091402.881619773],[6581966.705446966,7091298.709644096],[6582028.549679582,7091298.709644096],[6582059.471795897,7091246.624338305],[6582028.549679582,7091194.539206154],[6581997.627563274,7091194.539206154],[6581966.705446966,7091142.454416257],[6581935.7833306575,7091142.454416257],[6581873.939198152,7091038.285863262],[6581750.250732912,7091038.285863262],[6581595.640251474,7090777.870638617],[6581564.718135167,7090777.870638617],[6581533.7960188575,7090725.788586652],[6581471.9517862415,7090725.788586652],[6581379.18543731,7090569.544484007],[6581441.0296699265,7090465.38345989],[6581471.9517862415,7090465.38345989],[6581533.7960188575,7090361.223804525],[6581533.7960188575,7090309.144658718],[6581471.9517862415,7090204.987056383],[6581471.9517862415,7090048.753219023],[6581379.18543731,7089892.522460936],[6581286.419188497,7089892.522460936],[6581255.497072182,7089840.446394416],[6581224.574955872,7089840.446394416],[6581162.730723254,7089736.294950535],[6581193.652839564,7089684.219741759],[6581039.0423581265,7089423.848829234],[6581039.0423581265,7088903.132827383],[6580915.353892893,7088694.856104479],[6580822.587543962,7088538.652026794],[6580698.899178839,7088538.652026794],[6580296.911766922,7087861.803590575],[6580296.911766922,7087653.554054713],[6580265.989650614,7087601.492525457],[6580265.989650614,7087549.431338058],[6580204.145417997,7087445.309988867],[6579987.690703942,7087445.309988867],[6579956.768587634,7087393.249995606],[6579894.924455122,7087393.249995606],[6579802.158106197,7087237.0715612285],[6579771.235989889,7087185.012766775],[6579740.31387358,7087185.012766775],[6579709.391757265,7087132.954314144],[6579276.482329157,7087132.954314144],[6579245.56021285,7087080.896203335],[6579121.871747609,7087080.896203335],[6579090.9496313,7087080.896203335],[6579060.027514992,7087028.838434344],[6578936.339149864,7087028.838434344],[6578905.417033555,7086976.781007155],[6578534.351737952,7086976.781007155],[6578503.429621644,7087028.838434344],[6578472.5076054465,7087028.838434344],[6578286.97490759,7086716.499166667],[6578256.052791282,7086716.499166667],[6578101.442309844,7086456.225870509],[6578070.520193537,7086456.225870509],[6578039.598077227,7086404.172202835],[6577946.831728296,7086404.172202835],[6577915.909611987,7086352.118876897],[6577792.221246865,7086352.118876897],[6577699.454897935,7086195.960949455],[6577730.377014242,7086143.908990419],[6577730.377014242,7085831.604580436],[6577761.2991305515,7085779.555013253],[6577761.2991305515,7085415.217777952],[6577854.065479482,7085259.078300894],[6577854.065479482,7085154.9870242765],[6577823.143363174,7085102.941898373],[6577792.221246865,7085102.941898373],[6577668.532781625,7084894.764979151],[6577513.922300189,7084894.764979151],[6577483.000183879,7084842.721561172],[6577421.155951262,7084842.721561172],[6577359.31171864,7084738.635749919],[6577297.467586135,7084738.635749919],[6577266.545469826,7084686.593356627],[6577266.545469826,7084634.551304883],[6577297.467586135,7084582.509594689],[6577328.389702444,7084634.551304883],[6577637.610665317,7084634.551304883],[6577730.377014242,7084478.4273674],[6577730.377014242,7084270.266674136],[6577699.454897935,7084218.227354599],[6577699.454897935,7084166.18837656],[6577637.610665317,7084062.111444968],[6577637.610665317,7083333.611504204],[6577544.844416496,7083177.513008139],[6577544.844416496,7083021.417753006],[6577513.922300189,7082969.386627882],[6577513.922300189,7082657.207045582],[6577575.766532806,7082553.150083954],[6577575.766532806,7082397.066948711],[6577606.68864912,7082345.039919559],[6577699.454897935,7082188.960879884],[6577699.454897935,7082136.935215884],[6577606.68864912,7081980.860439924],[6577575.766532806,7081980.860439924],[6577513.922300189,7081876.812183285],[6577390.233834948,7081876.812183285],[6577359.31171864,7081824.788566831],[6577359.31171864,7081772.7652916135],[6577390.233834948,7081720.742357628],[6577359.31171864,7081668.719764865],[6577328.389702444,7081668.719764865],[6577297.467586135,7081616.697681753],[6577297.467586135,7081564.675771428],[6577359.31171864,7081460.6329744],[6577359.31171864,7081252.551474665],[6577297.467586135,7081148.512940288],[6577050.09065566,7080732.371775185],[6576988.246523149,7080732.371775185],[6576679.02546017,7080212.226187458],[6576586.259111238,7080212.226187458],[6576555.336994929,7080160.21365617],[6576493.492762312,7080160.21365617],[6576338.882280876,7079900.155273456],[6576091.505450514,7079900.155273456],[6575627.673805979,7079900.155273456],[6575225.686494179,7079900.155273456],[6575101.998028946,7079900.155273456],[6575040.153896434,7080004.177603421],[6575009.231780127,7080004.177603421],[6574978.309663817,7079952.166267922],[6574947.387547509,7080004.177603421],[6574916.465431199,7080004.177603421],[6574885.543314892,7080056.189279951],[6574174.334940107,7080056.189279951],[6573988.802242249,7079744.124336191],[6573926.958009632,7079744.124336191],[6573803.269644504,7079536.088029008],[6573586.814930451,7079536.088029008],[6573555.892814142,7079484.079762596],[6573463.12646521,7079484.079762596],[6573401.282232594,7079588.096636402],[6573184.8275185395,7079588.096636402],[6573153.905402232,7079536.088029008],[6573122.983285917,7079536.088029008],[6573092.061169608,7079484.079762596],[6572813.762222937,7079484.079762596],[6572782.840106629,7079432.071837164],[6572751.917990314,7079432.071837164],[6572720.995974117,7079380.064252699],[6572628.229625192,7079380.064252699],[6572597.307508884,7079432.071837164],[6572566.385392575,7079432.071837164],[6572535.46327626,7079380.064252699],[6572473.619043643,7079380.064252699],[6572442.697027447,7079380.064252699],[6572411.774911137,7079328.057009213],[6572349.930678514,7079328.057009213],[6572319.008562206,7079276.050106695],[6572257.164329589,7079276.050106695],[6572195.320096972,7079172.0374928955],[6572040.709615535,7079172.0374928955],[6572009.787499227,7079120.031613232],[6571886.099134099,7079120.031613232],[6571855.177017789,7079172.0374928955],[6571762.410668858,7079172.0374928955],[6571669.644319932,7079328.057009213],[6571515.033838497,7079328.057009213],[6571422.26748957,7079172.0374928955],[6571298.579124441,7079172.0374928955],[6571082.1243102765,7078808.003494809],[6570958.435945147,7078808.003494809],[6570865.669596222,7078651.994206275],[6570803.825363599,7078651.994206275],[6570741.981130982,7078547.989606141],[6570525.5264169285,7078547.989606141],[6570185.383237634,7078547.989606141],[6570154.461221437,7078495.9878174],[6570123.539105129,7078495.9878174],[6570061.694872512,7078391.985262512],[6570030.772756197,7078391.985262512],[6569968.92852358,7078287.984071081],[6569968.92852358,7078235.984154996],[6569938.006407272,7078183.984411402],[6569938.006407272,7078131.985008651],[6569814.318042144,7077923.990805899],[6569628.785344287,7077923.990805899],[6569597.863227977,7077871.993107252],[6569505.0969791645,7077871.993107252],[6569474.174862856,7077819.99574941],[6569350.486397615,7077819.99574941],[6569319.564281307,7077767.998900702],[6569288.642265109,7077767.998900702],[6569010.3433184335,7077300.041082325],[6568979.421202124,7077300.041082325],[6568948.499085817,7077248.047641294],[6568917.576969507,7077248.047641294],[6568793.888504267,7077040.076611126],[6568793.888504267,7076780.120657753],[6568391.901192469,7076104.274768059],[6568360.979076159,7076104.274768059],[6568082.680129482,7075636.415232853],[6567989.913780557,7075636.415232853],[6567928.06954794,7075532.4501561625],[6568020.835896866,7075376.505095213],[6568020.835896866,7075012.64537298],[6568113.602245797,7074856.71069568],[6568113.602245797,7074544.8501971625],[6568175.446378302,7074440.899421237],[6568175.446378302,7074284.975978846],[6568299.134843542,7074077.082597027],[6568299.134843542,7073869.194829701],[6568330.056959852,7073817.223696738],[6568330.056959852,7073609.342568447],[6568793.888504267,7072829.837169071],[6568793.888504267,7072777.872842252],[6568917.576969507,7072570.018937399],[6568917.576969507,7072258.24845499]]],\"spatialReference\":{\"wkid\":102100}}\",\"sid\":\"20160124HP001\",\"reghighid\":\"\",\"rname\":\"\",\"nodetype\":\"GS\",\"binstrlen\":\"2416\",\"username\":\"\",\"binstrval\":\"0\"},{\"regionid\":\"239001\",\"shape\":\"{\"paths\":[[[6519163.909146884,6662746.659816264],[6519040.220781757,6662746.659816264],[6519009.298665448,6662697.275019687],[6518978.376549139,6662697.275019687],[6518947.454432831,6662647.890521251],[6518916.532316522,6662647.890521251],[6518792.843951394,6662450.355668681],[6518792.843951394,6662154.062093381],[6518700.077602468,6662005.91948985],[6518545.467121031,6662005.91948985],[6518514.545004724,6662005.91948985],[6518329.012306866,6662005.91948985],[6518298.090190551,6661956.539164867],[6518205.323941738,6661956.539164867],[6518174.401825429,6661907.1591379475],[6518112.557592812,6661907.1591379475],[6518081.635476497,6661857.779409097],[6518081.635476497,6661610.885235622],[6517957.947111376,6661413.375421369],[6517957.947111376,6661363.9986728905],[6517896.102878751,6661265.246069954],[6517896.102878751,6661215.870215497],[6517710.570180895,6660919.621506358],[6517710.570180895,6660623.383524068],[6517710.570180895,6660574.011543196],[6517463.193350532,6660179.046581318],[6517463.193350532,6660129.677281688],[6517370.427101719,6659981.571170127],[6517277.660752786,6659981.571170127],[6517123.050171238,6660228.416019003],[6517092.1281550415,6660228.416019003],[6517030.283922425,6660327.156107759],[6516906.595457184,6660327.156107759],[6516721.062859439,6660327.156107759],[6516690.140743131,6660376.526599005],[6516597.3743942045,6660376.526599005],[6516164.464966091,6660376.526599005],[6516071.698617166,6660228.416019003],[6516040.7765008565,6660228.416019003],[6515886.166019421,6659981.571170127],[6515700.633321564,6659981.571170127],[6515669.711305366,6659932.2030620435],[6515638.789189058,6659932.2030620435],[6515236.801777147,6659290.444921442],[6515051.269179401,6659290.444921442],[6513288.709150432,6656477.176717321]]],\"spatialReference\":{\"wkid\":102100}}\",\"sid\":\"20160124HP001\",\"reghighid\":\"\",\"rname\":\"11\",\"nodetype\":\"RS\",\"binstrlen\":\"1798\",\"username\":\"\",\"binstrval\":\"0\"}],\"extent\":6593964.482470464;6513288.709150432;7148486.467259807;6656477.176717321}";
            
            JsonObject resultsJsonObj = new JsonObject(jsonStr);
            JsonProperty jsonProperty = resultsJsonObj["features"];
            int cnt = jsonProperty.Count;
            string regionid = "", binstrlen = "", binstrval = "", reghighid = "", shape = "", nodetype = "", rname = "";
            string continentName = "";
            //regionidnew = ""

            //riverSegs.Clear();
            sid = jsonProperty.Items[0]["sid"].Value;
            //删除指定方案的出口河段
            string sqlDel = "delete from jzjw_definednodes where sid ='" + sid + "'";
            DbHelper.ExecuteSql(sqlDel);
            //ren删除指定方案的上游河段
            string sqlDelUp = "delete from jzjw_region where sid ='" + sid + "'";
            DbHelper.ExecuteSql(sqlDelUp);

            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["sid"];
                    if (jpItem != null) { sid = jpItem.Value; }

                    jpItem = jp["binstrlen"];
                    if (jpItem != null) { binstrlen = jpItem.Value; }

                    jpItem = jp["binstrval"];
                    if (jpItem != null) { binstrval = jpItem.Value; }

                    jpItem = jp["reghighid"];
                    if (jpItem != null) { reghighid = jpItem.Value; }

                    jpItem = jp["regionid"];
                    if (jpItem != null)
                    {
                        //添加20140827判断大洲
                        regionid = jpItem.Value;
                        if (continentName == "")
                        {
                            continentName = ConName(regionid);
                        }
                        //前三位替换成341
                        //regionid = "341" + regionid.Substring(3);

                    }
                    jpItem = jp["nodetype"];
                    if (jpItem != null) { nodetype = jpItem.Value; }
                    jpItem = jp["rname"];
                    if (jpItem != null) { rname = jpItem.Value; }
                    jpItem = jp["shape"];
                    if (jpItem != null) { shape = jpItem.Value; }
                }

                if (!string.IsNullOrEmpty(sid))
                {
                    AddDefinedNodesOld(sid, regionid, binstrlen, binstrval, reghighid, shape, "jzjw_definednodes", nodetype);
                    if (nodetype == "RS")
                        //插入到水库表
                        AddReservoir(sid, regionid, binstrlen, binstrval, shape, rname);
                }
            }
            try
            {
                jsonProperty = resultsJsonObj["extent"];
                string ext = jsonProperty.Value;
                sql = "update jzjw_scheme set ext='" + ext + "' where sid='" + sid + "'";
                DbHelper.ExecuteSql(sql);
            }
            catch (Exception ex)
            {

            }
            if (cnt == 1)
            {
                //sql = "select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "' and binstrval=0";
                sql = "select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "'";
            }
            else
            {
                sql = "select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "' and binstrval=0";
            }
            DataSet ds = DbHelper.Query(sql);
            if (ds != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                //ren 添加限制条件 
                if (dt != null && dt.Rows.Count > 0 && dt.Rows[0]["minrgnid"].ToString() != "")
                {
                    //int minregionidnew = Convert.ToInt32(dt.Rows[0]["minrgnid"]);
                    long minregionidnew = Convert.ToInt64(dt.Rows[0]["minrgnid"]);
                    long minbinstrlen = Convert.ToInt64(dt.Rows[0]["minbslen"]);
                    string tmp = "" + minregionidnew;
                    int len = tmp.Length;
                    /*之前
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 " +
"where regionidnew='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + ")" +
" union select '" + sid + "' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 " +
"where substr(regionidnew,1," + len + ")='" + minregionidnew + "' and length(regionidnew)>" + len + ")";
                     */
                    //提交河段选择ByRen1
                    /*
                    sql="insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval)
                     * (select '"+sid+"' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 "+
"where regionidnew='"+minregionidnew+"' and binstrlen>="+minbinstrlen+"  and 0=hydrompnew.get_out_bsv(binstrval,binstrlen,"+minbinstrlen+")"+                        
" union select '"+sid+"' as sid,regionidnew,reghighid,region id,binstrlen,binstrval from hydrompnew.pearl_river1 "+
"where regionidnew in (select regionidnew from (select regionidnew,min(binstrlen) from hydrompnew.pearl_river1 "+
                     * "where substr(regionidnew,1,"+len+ ")='" + minregionidnew+"' and length(regionidnew)>"+len+" group by regionidnew having min(binstrlen)>"+minbinstrlen+")))";
                    */
                    int lenNew = len + 3;
                    /* 20140728适合珠江流域代码
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                    int z = DbHelper.ExecuteSql(sql);
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
"(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where regioncode in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                    int i = DbHelper.ExecuteSql(sql);
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
 "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                    int j = DbHelper.ExecuteSql(sql);
                    */
                    /* 20140827只是针对亚洲数据
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                    int z = DbHelper.ExecuteSql(sql);
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
"(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where regioncode in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                    int i = DbHelper.ExecuteSql(sql);
                    sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
 "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
"where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                    int j = DbHelper.ExecuteSql(sql);
                    */
                    //针对全球数据
                    if (continentName != "")
                    {
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
    "where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                        int z = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) " +
    "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
    "where regioncode in (select regioncode from (select regioncode,min(binstrlen) from GDN2." + continentName +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                        int i = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) " +
     "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
    "where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from GDN2." + continentName +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                        int j = DbHelper.ExecuteSql(sql);

                    }

                    //minregionidnew加单引号 加快速度
                    /*
                    if (i > 0)
                    { str = "{\"msg\":\"ok\"}"; }
                    else
                    { str = "{\"msg\":\"error\"}"; }
                     */
                    str = "{\"msg\":\"ok\"}";
                }
                else
                { str = "{\"msg\":\"error\"}"; }
            }

            return str;
        }

        /// <summary>
        /// 提交河段选择    这个是修改了用户权限控制
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddRegionSel1(NameValueCollection reqParams)
        {
            List<RiverSeg> riverSegs = new List<RiverSeg>();
            RiverSeg Rivertmp = new RiverSeg();
            string jsonStr = reqParams.Get("rslt");
            string sql = "", str = "", sid = "";

            //string jsonStr="{\"features\":[{\"binstrval\":\"0\",\"regionid\":\"117001348066065003002\",\"username\":\"testren1226\",\"sid\":\"20141226HP004\",\"binstrlen\":\"2425\",\"reghighid\":\"\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12271321.545557084,3454495.502880721],[12271105.090843027,3454246.518672298],[12271105.090843027,3453961.971156183],[12271166.934975537,3453890.835228519],[12271197.85709185,3453890.835228519],[12271290.623440774,3453784.1320720897],[12271290.623440774,3453712.997239657]]]}\",\"isapply\":\"0\",\"UPSUBAREA\":\"36.866\"},{\"binstrval\":\"0\",\"regionid\":\"117001348066065003002\",\"username\":\"testren1226\",\"sid\":\"20141226HP004\",\"binstrlen\":\"2429\",\"reghighid\":\"\",\"shape\":\"{\"spatialReference\":{\"wkid\":102100},\"paths\":[[[12272403.819227472,3455704.923301878],[12272403.819227472,3455669.3504848066],[12272372.897111164,3455633.7777658],[12272372.897111164,3455598.205144884],[12272341.974994848,3455562.6326220417],[12272341.974994848,3455527.060197274],[12272311.052878538,3455491.487870582],[12272311.052878538,3455384.771594083],[12272280.130762232,3455349.199659667],[12272280.130762232,3455242.4844448133]]]}\",\"isapply\":\"0\",\"UPSUBAREA\":\"24.314\"}],\"extent\":12272403.819227472;12271105.090843027;3455704.923301878;3453712.997239657}";
            JsonObject resultsJsonObj = new JsonObject(jsonStr);
            JsonProperty jsonProperty = resultsJsonObj["features"];
            int cnt = jsonProperty.Count;
            string regionid = "", isapply = "", binstrlen = "", UPSUBAREA = "", binstrval = "", reghighid = "", shape = "", username = "";
            string continentName = "";

            sid = jsonProperty.Items[0]["sid"].Value;
            username = jsonProperty.Items[0]["username"].Value;
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["sid"];
                    if (jpItem != null) { sid = jpItem.Value; }
                    jpItem = jp["binstrlen"];
                    if (jpItem != null) { binstrlen = jpItem.Value; }
                    jpItem = jp["isapply"];
                    if (jpItem != null) { isapply = jpItem.Value; }
                    jpItem = jp["UPSUBAREA"];
                    if (jpItem != null) { UPSUBAREA = jpItem.Value; }
                    jpItem = jp["binstrval"];
                    if (jpItem != null) { binstrval = jpItem.Value; }
                    jpItem = jp["reghighid"];
                    if (jpItem != null) { reghighid = jpItem.Value; }
                    jpItem = jp["regionid"];
                    if (jpItem != null)
                    {
                        //添加20140827判断大洲
                        regionid = jpItem.Value;
                        if (continentName == "")
                        {
                            continentName = ConName(regionid);
                        }
                        //前三位替换成341
                        //regionid = "341" + regionid.Substring(3);                        
                    }
                    jpItem = jp["shape"];
                    if (jpItem != null) { shape = jpItem.Value; }
                }
                //插入选中的河段
                /*
                if (!string.IsNullOrEmpty(sid))
                    AddDefinedNodes(sid, regionid, binstrlen, binstrval, reghighid, shape, "jzjw_definednodes");
                 */
                if (!string.IsNullOrEmpty(sid))
                {
                    //当前用户方案选中的河段
                    Rivertmp = new RiverSeg(sid, regionid, Convert.ToInt64(binstrlen), Convert.ToInt64(binstrval), regionid, reghighid, shape, Convert.ToDouble(UPSUBAREA));
                    riverSegs.Add(Rivertmp);
                }

            }
            //如果返回True 则说明有权限，执行后面的代码
            if (CheckAvail(isapply, username, riverSegs, continentName))
            {
                //删除指定方案的出口河段
                string sqlDel = "delete from jzjw_definednodes where sid ='" + sid + "'";
                DbHelper.ExecuteSql(sqlDel);
                //ren删除指定方案的上游河段
                string sqlDelUp = "delete from jzjw_region where sid ='" + sid + "'";
                DbHelper.ExecuteSql(sqlDelUp);

                //如果有权限 则插入选中的河段
                //if (!string.IsNullOrEmpty(sid))
                //    AddDefinedNodes(sid, regionid, binstrlen, binstrval, reghighid, shape, "jzjw_definednodes");
                foreach (RiverSeg river in riverSegs)
                {
                    //插入选中的河段
                    AddDefinedNodes(sid, river.REGIONID, river.BINSTRLEN.ToString(), river.BINSTRVAL.ToString(), river.REGHIGHID, river.shape, "jzjw_definednodes");
                    if (isapply == "1")
                        //插入用户申请权限表
                        Adduserauthority(username, sid, river.REGIONID, river.BINSTRLEN.ToString(), river.BINSTRVAL.ToString(), river.REGHIGHID, river.shape, "0", river.UPSUBAREA.ToString());
                }
                try
                {
                    jsonProperty = resultsJsonObj["extent"];
                    string ext = jsonProperty.Value;
                    sql = "update jzjw_scheme set ext='" + ext + "' where sid='" + sid + "'";
                    DbHelper.ExecuteSql(sql);
                }
                catch (Exception ex)
                {

                }

                sql = "select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "' and binstrval=0";
                //sql = "select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "'";
                DataSet ds = DbHelper.Query(sql);
                if (ds != null && ds.Tables.Count > 0)
                {
                    DataTable dt = ds.Tables[0];
                    //ren 添加限制条件 
                    if (dt != null && dt.Rows.Count > 0 && dt.Rows[0]["minrgnid"].ToString() != "")
                    {
                        //int minregionidnew = Convert.ToInt32(dt.Rows[0]["minrgnid"]);
                        //20141215修改部分
                        //long minregionidnew = Convert.ToInt64(dt.Rows[0]["minrgnid"]);
                        string minregionidnew = dt.Rows[0]["minrgnid"].ToString();
                        long minbinstrlen = Convert.ToInt64(dt.Rows[0]["minbslen"]);
                        string tmp = "" + minregionidnew;
                        int len = tmp.Length;
                        /*之前
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 " +
    "where regionidnew='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + ")" +
    " union select '" + sid + "' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 " +
    "where substr(regionidnew,1," + len + ")='" + minregionidnew + "' and length(regionidnew)>" + len + ")";
                         */
                        //提交河段选择ByRen1
                        /*
                        sql="insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval)
                         * (select '"+sid+"' as sid,regionidnew,reghighid,regionid,binstrlen,binstrval from hydrompnew.pearl_river1 "+
    "where regionidnew='"+minregionidnew+"' and binstrlen>="+minbinstrlen+"  and 0=hydrompnew.get_out_bsv(binstrval,binstrlen,"+minbinstrlen+")"+                        
    " union select '"+sid+"' as sid,regionidnew,reghighid,region id,binstrlen,binstrval from hydrompnew.pearl_river1 "+
    "where regionidnew in (select regionidnew from (select regionidnew,min(binstrlen) from hydrompnew.pearl_river1 "+
                         * "where substr(regionidnew,1,"+len+ ")='" + minregionidnew+"' and length(regionidnew)>"+len+" group by regionidnew having min(binstrlen)>"+minbinstrlen+")))";
                        */
                        int lenNew = len + 3;
                        /* 20140728适合珠江流域代码
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                        int z = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
    "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where regioncode in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                        int i = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
     "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,'' as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                        int j = DbHelper.ExecuteSql(sql);
                        */
                        /* 20140827只是针对亚洲数据
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=hydrompnew.get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                        int z = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
    "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where regioncode in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                        int i = DbHelper.ExecuteSql(sql);
                        sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval) " +
     "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from hydrompnew.gdn2_asia_river1 " +
    "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                        int j = DbHelper.ExecuteSql(sql);
                        */
                        //针对全球数据
                        if (continentName != "")
                        {
                            sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) (select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
                                    "where regioncode='" + minregionidnew + "' and binstrlen>=" + minbinstrlen + " and 0=get_out_bsv(binstrval,binstrlen," + minbinstrlen + "))";
                            int z = DbHelper.ExecuteSql(sql);
                            sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) " +
        "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
        "where regioncode in (select regioncode from (select regioncode,min(binstrlen) from GDN2." + continentName +
        "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")))";
                            int i = DbHelper.ExecuteSql(sql);
                            sql = "insert into jzjw_region(sid,regionidnew,reghighid,regionid,binstrlen,binstrval,STRAHLER) " +
         "(select '" + sid + "' as sid,regioncode as regionidnew,'' as reghighid,regioncode as regionid,binstrlen,binstrval,STRAHLER from GDN2." + continentName +
        "where substr(regioncode,1," + lenNew + ") in (select regioncode from (select regioncode,min(binstrlen) from GDN2." + continentName +
        "where substr(regioncode,1," + len + ")='" + minregionidnew + "' and length(regioncode)=" + lenNew + " group by regioncode having min(binstrlen)>" + minbinstrlen + ")) and length(regioncode)>" + lenNew + ")";
                            int j = DbHelper.ExecuteSql(sql);

                        }

                        //minregionidnew加单引号 加快速度
                        /*
                        if (i > 0)
                        { str = "{\"msg\":\"ok\"}"; }
                        else
                        { str = "{\"msg\":\"error\"}"; }
                         */
                        str = "{\"msg\":\"ok\"}";
                    }
                    else
                    { str = "{\"msg\":\"error\"}"; }
                }
            }
            else { str = "{\"msg\":\"errorUser\"}"; }
            return str;
        }
        /// <summary>
        /// 用户出口权限表
        /// </summary>
        /// <param name="sid"></param>
        /// <param name="regionid"></param>
        /// <param name="binstrlen"></param>
        /// <param name="binstrval"></param>
        /// <param name="reghighid"></param>
        /// <param name="shape"></param>
        /// <param name="tableName"></param>
        /// <returns></returns>
        public static int Adduserauthority(string username, string sid, string regionid, string binstrlen, string binstrval, string reghighid, string shape, string isok, string UPSUBAREA)
        {

            StringBuilder sb = new StringBuilder();
            sb.Append("insert into jzjw_userauthority(");
            sb.Append("username,sid,regionid,binstrlen,binstrval,reghighid,shape,regionidnew,isok,UPSUBAREA)");
            sb.Append(" values (");
            sb.Append(":username,:sid,:regionid,:binstrlen,:binstrval,:reghighid,:shape,:regionidnew,:isok,:UPSUBAREA)");

            //OracleDbType   OracleType.VarChar   Number  Clob
            OracleParameter[] parameters = {
                    new OracleParameter("username",OracleDbType.Varchar2),
					new OracleParameter("sid",OracleDbType.Varchar2,50),					
					new OracleParameter("regionid",OracleDbType.Double),
					new OracleParameter("binstrlen",OracleDbType.Double),
					new OracleParameter("binstrval",OracleDbType.Double),
					new OracleParameter("reghighid",OracleDbType.Double),					
					new OracleParameter("shape",OracleDbType.Clob),
                    new OracleParameter("regionidnew",OracleDbType.Varchar2),
                    new OracleParameter("isok",OracleDbType.Varchar2),
                    new OracleParameter("UPSUBAREA",OracleDbType.Double),};
            if (string.IsNullOrEmpty(username))
            {
                parameters[0].Value = DBNull.Value;
            }
            else
            {
                parameters[0].Value = username;
            }

            parameters[1].Value = sid;

            if (string.IsNullOrEmpty(regionid))
            {
                parameters[2].Value = DBNull.Value;
            }
            else
            {
                parameters[2].Value = regionid; //Convert.ToInt32(regionid);
            }

            if (string.IsNullOrEmpty(binstrlen))
            {
                parameters[3].Value = DBNull.Value; ;
            }
            else
            {
                parameters[3].Value = binstrlen;// Convert.ToInt32(binstrlen);
            }

            if (string.IsNullOrEmpty(binstrval))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = binstrval;//Convert.ToInt32(binstrval);
            }

            if (string.IsNullOrEmpty(reghighid))
            {
                parameters[5].Value = DBNull.Value;
            }
            else
            {
                parameters[5].Value = reghighid;//Convert.ToInt32(reghighid);
            }


            parameters[6].Value = shape;// System.Text.Encoding.Default.GetBytes(shape);
            //parameters[6].Value = GetNewRegionId(reghighid, regionid);//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            parameters[7].Value = regionid;//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            parameters[8].Value = isok;

            if (string.IsNullOrEmpty(UPSUBAREA))
            {
                parameters[9].Value = DBNull.Value;
            }
            else
            {
                parameters[9].Value = UPSUBAREA;//Convert.ToInt32(reghighid);
            }
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }
        /// <summary>
        /// 判断用户是否有权限建立方案计算
        /// </summary>
        /// <param name="UserName">用户名</param>
        /// <param name="riversegs">方案的选定河段</param>
        /// <param name="continentName">大洲名</param>
        /// <returns></returns>
        public static Boolean CheckAvail(string isapply, string UserName, List<RiverSeg> riversegs, string continentName)
        {
            Boolean bl = false;
            if (UserName == "OK" || UserName == "test" || isapply == "1")
                bl = true;
            else
            {
                //用户限定的出口河段
                string sql = "select * from JZJW_USERAUTHORITY where username='" + UserName + "' and isok='1'";
                DataTable dt = DbHelper.Query(sql).Tables[0];
                //DataTable dtRiver = new DataTable();
                if (dt.Rows.Count > 0)
                {
                    //当前方案的选中河段的最下游河段
                    //select min(regionidnew) as minrgnid,min(binstrlen) as minbslen from  jzjw_definednodes where sid='" + sid + "' and binstrval=0";  
                    //var minrgnid = (from river in riverSegs where river.BINSTRVAL == 0 select river.REGIONIDNEW).Min();
                    //var minbslen = (from river in riverSegs where river.BINSTRVAL == 0 select river.BINSTRLEN).Min();
                    string[] minValue = MostDownRiver(riversegs);
                    string minrgnid = minValue[0].ToString();
                    long minbslen = Convert.ToInt64(minValue[1]);
                    //获取得到的下游河段的上游所有河段数据 DataSet
                    if (continentName != "")
                    {
                        string regionIDNew = "";
                        string binstrValue = "";
                        string binstrLen = "";
                        string sqlTmp;
                        string tmp;
                        //限定的出口河段集合
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            regionIDNew = dt.Rows[i]["REGIONIDNEW"].ToString();
                            binstrValue = dt.Rows[i]["BINSTRVAL"].ToString();
                            binstrLen = dt.Rows[i]["BINSTRLEN"].ToString();

                            long lbinstrLen = Convert.ToInt64(binstrLen);
                            if (regionIDNew.Length > minrgnid.Length)
                            {
                                continue;
                            }
                            else if (regionIDNew.Length == minrgnid.Length)
                            {
                                sql = "select get_out_bsv(0," + minbslen + "," + binstrLen + ") as tmp from dual";
                                sqlTmp = DbHelper.GetSingle(sql).ToString();
                                //这块有问题
                                //if (regionIDNew == minrgnid && minbslen >= 0 && binstrValue == sqlTmp)
                                if (regionIDNew == minrgnid && minbslen >= lbinstrLen && binstrValue == sqlTmp)
                                {
                                    //在
                                    bl = true;
                                    break;
                                }
                            }
                            else
                            {
                                tmp = minrgnid.Substring(0, binstrLen.Length + 3);
                                int regionNewLen = regionIDNew.Length + 3;
                                sql = "select regioncode from (select regioncode,min(binstrlen) from GDN2." + continentName +
                                    "where substr(regioncode,1," + regionIDNew.Length + ")='" + minrgnid + "' and length(regioncode)=" +
                                    regionNewLen + " group by regioncode having min(binstrlen)>" + minbslen + ")";
                                DataTable dtregioncode = DbHelper.Query(sql).Tables[0];
                                if (dtregioncode.Rows.Count > 0)
                                {
                                    for (int j = 0; j < dtregioncode.Rows.Count; j++)
                                    {
                                        if (tmp == dtregioncode.Rows[j]["regioncode"].ToString())
                                        {
                                            bl = true;
                                            break;
                                        }
                                    }
                                }

                            }
                        }
                    }
                }
            }
            return bl;
        }
        /// <summary>
        /// 查找下游河段
        /// </summary>
        /// <param name="riversegs"></param>
        /// <returns></returns>
        public static string[] MostDownRiver(List<RiverSeg> riversegs)
        {
            //string t1 = long.MaxValue.ToString();
            //string t2=long.MaxValue.ToString();
            string t1 = riversegs[0].REGIONIDNEW;
            string t2 = long.MaxValue.ToString();
            //查找出min（REGIONIDNEW）
            foreach (RiverSeg rs in riversegs)
            {
                if (rs.BINSTRVAL.ToString() == "0" && t1.Length > rs.REGIONIDNEW.Length)
                {
                    t1 = rs.REGIONIDNEW;
                }
            }
            //查找出min(BINSTRLEN)
            foreach (RiverSeg rs in riversegs)
            {
                if (rs.BINSTRVAL.ToString() == "0" && t1 == rs.REGIONIDNEW && Convert.ToInt64(t2) > rs.BINSTRLEN)
                {
                    t2 = rs.BINSTRLEN.ToString();
                }
            }
            return new String[2] { t1, t2 };
        }


        /// <summary>
        /// 根据regionid获取前三位返回大洲所在表
        /// </summary>
        /// <param name="regionid"></param>
        /// <returns></returns>
        private static string ConName(string regionid)
        {
            string continentName = "";
            switch (regionid.Substring(0, 1))
            {
                case "5":
                    continentName = "gdn2_sxh_river1 ";
                    break;
                case "1":
                    continentName = "gdn2_asia_river1 ";
                    break;
                case "2":
                    continentName = "gdn2_europe_river1 ";
                    break;
                case "4":
                    if (regionid.Substring(0, 3) == "419")
                        continentName = "gdn2_missi_river1 ";
                    else
                        continentName = "gdn2_northamerica_river1 ";
                    break;
            }
            return continentName;
        }
        /*
        private static void CheckRiverSeg(string sid, string lyrname, string lyrid, string regionid, string bsval, string bslen)
        {
            //select objectid,channelid , regionid ,binstrlen ,binstrval ,reghighid  ,shape from hg02.pearl_river1 where regionid=339001083025 and binstrlen=2127  and binstrval=0 order by binstrlen desc
            string sql = "select objectid,channelid , regionid ,binstrlen ,binstrval ,reghighid,sde.st_astext(shape) as shape from hg02.gdn2_asia_river1 where regionid=" + regionid + " and binstrlen>=" + bslen + "  and " + bsval + "=hg02.get_out_bsv(binstrval,binstrlen," + bslen + ") order by binstrlen desc";
            string strConn = "Data Source=dwm474;User ID=hydroglobal;Password=hydroglobal474;";

            try
            {
                //之前未被注释掉
                IDataBase myDb = DBFactory.GetDBInstance(strConn);
                DataTable dt = myDb.GetDataTable(sql);
                if (dt != null && dt.Rows.Count > 0)
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        int rgnid = Convert.ToInt32(dt.Rows[i]["REGIONID"]);
                        int binstrlen = Convert.ToInt32(dt.Rows[i]["BINSTRLEN"]);
                        int binstrval = Convert.ToInt32(dt.Rows[i]["BINSTRVAL"]);
                        int objectid = Convert.ToInt32(dt.Rows[i]["OBJECTID"]);
                        int channelid = Convert.ToInt32(dt.Rows[i]["CHANNELID"]);
                        int reghighid = Convert.ToInt32(dt.Rows[i]["REGHIGHID"]);
                        string shp = dt.Rows[i]["SHAPE"] as string;

                        RiverSeg rs = new RiverSeg();
                        rs.sid = sid;
                        rs.lyrname = lyrname;
                        rs.lyrid = Convert.ToInt32(lyrid);
                        rs.objectid = objectid;
                        rs.channelid = channelid;
                        rs.reghighid = reghighid;
                        rs.regionid = rgnid;
                        rs.binstrlen = binstrlen;
                        rs.binstrval = binstrval;
                        rs.shape = shp;

                        if (!riverSegs.Contains(rs))
                        {
                            riverSegs.Add(rs);
                        }
                    }
                }
            }
            catch (Exception e)
            {

            }
        }
        */
        /// <summary>
        /// 添加水库
        /// </summary>
        /// <param name="sid"></param>
        /// <param name="regionid"></param>
        /// <param name="binstrlen"></param>
        /// <param name="binstrval"></param>
        /// <param name="shape"></param>
        /// <param name="rname"></param>
        /// <returns></returns>
        public static int AddReservoir(string sid, string regionid, string binstrlen, string binstrval, string shape, string rname)
        {
            string sql = "insert into jzjw_reservoir(SID,REGIONIDNEW,REGIONID,BINSTRLEN,BINSTRVAL,SHAPE,RNAME,ISSELECT) values('" + sid + "','" + regionid + "'," +
               regionid + "," + binstrlen + "," + binstrval + ",'" + shape + "','" + rname + "',0)";
            return DbHelper.ExecuteSql(sql);
        }
        /// <summary>
        /// 添加水库流量过程
        /// </summary>
        /// <param name="REGIONIDNEW"></param>
        /// <param name="BINSTRLEN"></param>
        /// <param name="BINSTRVAL"></param>
        /// <param name="STIME"></param>
        /// <param name="SFLOW"></param>
        /// <returns></returns>
        public static int AddReservoirFlowSQL(string SID, string REGIONIDNEW, string BINSTRLEN, string BINSTRVAL, string STIME, string SFLOW)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into jzjw_reservoirflow(");
            sb.Append("SID,REGIONIDNEW,REGIONID,BINSTRLEN,BINSTRVAL,STIME,SFLOW)");
            sb.Append(" values (");
            sb.Append(":SID,:REGIONIDNEW,:REGIONID,:BINSTRLEN,:BINSTRVAL,:STIME,:SFLOW)");

            //OracleDbType   OracleType.VarChar   Number  Clob
            OracleParameter[] parameters = {
					new OracleParameter("SID",OracleDbType.Varchar2,50),					
					new OracleParameter("REGIONIDNEW",OracleDbType.Varchar2,50),
					new OracleParameter("REGIONID",OracleDbType.Double),
					new OracleParameter("BINSTRLEN",OracleDbType.Double),
					new OracleParameter("BINSTRVAL",OracleDbType.Double),					
					new OracleParameter("STIME",OracleDbType.Date),
                    new OracleParameter("SFLOW",OracleDbType.Double)};
            parameters[0].Value = SID;
            if (string.IsNullOrEmpty(REGIONIDNEW))
            {
                parameters[1].Value = DBNull.Value;
            }
            else
            {
                parameters[1].Value = REGIONIDNEW; //Convert.ToInt32(regionid);
            }
            if (string.IsNullOrEmpty(REGIONIDNEW))
            {
                parameters[2].Value = DBNull.Value; ;
            }
            else
            {
                parameters[2].Value = REGIONIDNEW;// Convert.ToInt32(binstrlen);
            }
            if (string.IsNullOrEmpty(BINSTRLEN))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                parameters[3].Value = BINSTRLEN;
            }
            if (string.IsNullOrEmpty(BINSTRVAL))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = BINSTRVAL;
            }
            if (string.IsNullOrEmpty(STIME))
            {
                parameters[5].Value = DBNull.Value;
            }
            else
            {
                parameters[5].Value = Convert.ToDateTime(STIME.Replace("_", " ") + ":00");
            }
            if (string.IsNullOrEmpty(SFLOW))
            {
                parameters[6].Value = DBNull.Value;
            }
            else
            {
                parameters[6].Value = SFLOW;
            }
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }
        public static int AddDefinedNodes(string sid, string regionid, string binstrlen, string binstrval, string reghighid, string shape, string tableName)
        {

            StringBuilder sb = new StringBuilder();
            sb.Append("insert into " + tableName + "(");
            sb.Append("sid,regionid,binstrlen,binstrval,reghighid,shape,regionidnew)");
            sb.Append(" values (");
            sb.Append(":sid,:regionid,:binstrlen,:binstrval,:reghighid,:shape,:regionidnew)");

            //OracleDbType   OracleType.VarChar   Number  Clob
            OracleParameter[] parameters = {
					new OracleParameter("sid",OracleDbType.Varchar2,50),					
					new OracleParameter("regionid",OracleDbType.Double),
					new OracleParameter("binstrlen",OracleDbType.Double),
					new OracleParameter("binstrval",OracleDbType.Double),
					new OracleParameter("reghighid",OracleDbType.Double),					
					new OracleParameter("shape",OracleDbType.Clob),
                    new OracleParameter("regionidnew",OracleDbType.Varchar2)};
            parameters[0].Value = sid;

            if (string.IsNullOrEmpty(regionid))
            {
                parameters[1].Value = DBNull.Value;
            }
            else
            {
                parameters[1].Value = regionid; //Convert.ToInt32(regionid);
            }

            if (string.IsNullOrEmpty(binstrlen))
            {
                parameters[2].Value = DBNull.Value; ;
            }
            else
            {
                parameters[2].Value = binstrlen;// Convert.ToInt32(binstrlen);
            }

            if (string.IsNullOrEmpty(binstrval))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                parameters[3].Value = binstrval;//Convert.ToInt32(binstrval);
            }

            if (string.IsNullOrEmpty(reghighid))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = reghighid;//Convert.ToInt32(reghighid);
            }


            parameters[5].Value = shape;// System.Text.Encoding.Default.GetBytes(shape);
            //parameters[6].Value = GetNewRegionId(reghighid, regionid);//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            parameters[6].Value = regionid;//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }
        public static int AddDefinedNodesOld(string sid, string regionid, string binstrlen, string binstrval, string reghighid, string shape, string tableName, string nodetype)
        {

            StringBuilder sb = new StringBuilder();
            sb.Append("insert into " + tableName + "(");
            sb.Append("sid,regionid,binstrlen,binstrval,reghighid,shape,regionidnew,nodetype)");
            sb.Append(" values (");
            sb.Append(":sid,:regionid,:binstrlen,:binstrval,:reghighid,:shape,:regionidnew,:nodetype)");

            //OracleDbType   OracleType.VarChar   Number  Clob
            OracleParameter[] parameters = {
					new OracleParameter("sid",OracleDbType.Varchar2,50),					
					new OracleParameter("regionid",OracleDbType.Double),
					new OracleParameter("binstrlen",OracleDbType.Double),
					new OracleParameter("binstrval",OracleDbType.Double),
					new OracleParameter("reghighid",OracleDbType.Double),					
					new OracleParameter("shape",OracleDbType.Clob),
                    new OracleParameter("regionidnew",OracleDbType.Varchar2),
                    new OracleParameter("nodetype",OracleDbType.Varchar2)};
            parameters[0].Value = sid;

            if (string.IsNullOrEmpty(regionid))
            {
                parameters[1].Value = DBNull.Value;
            }
            else
            {
                parameters[1].Value = regionid; //Convert.ToInt32(regionid);
            }

            if (string.IsNullOrEmpty(binstrlen))
            {
                parameters[2].Value = DBNull.Value; ;
            }
            else
            {
                parameters[2].Value = binstrlen;// Convert.ToInt32(binstrlen);
            }

            if (string.IsNullOrEmpty(binstrval))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                parameters[3].Value = binstrval;//Convert.ToInt32(binstrval);
            }

            if (string.IsNullOrEmpty(reghighid))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = reghighid;//Convert.ToInt32(reghighid);
            }


            parameters[5].Value = shape;// System.Text.Encoding.Default.GetBytes(shape);
            //parameters[6].Value = GetNewRegionId(reghighid, regionid);//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            parameters[6].Value = regionid;//Convert.ToInt32(GetNewRegionId(reghighid, regionid));
            if (string.IsNullOrEmpty(nodetype))
            {
                parameters[7].Value = DBNull.Value;
            }
            else
            {
                parameters[7].Value = nodetype;
            }
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }

        public static int AddDefinedNodes1(string sid, string objectid, string channelid, string regionid, string binstrlen, string binstrval, string reghighid, string innerchnl, string lyrname, string lyrid, string shape)
        {
            string sql = "", sql1 = "", sql2 = "";
            sql = "insert into jzjw_definednodes";
            sql2 = "(sid,objectid";
            sql1 += "'" + sid + "'," + objectid;
            if (!string.IsNullOrEmpty(channelid.Trim()))
            {
                sql2 += ",channelid";
                sql1 += "," + channelid.Trim();
            }

            if (!string.IsNullOrEmpty(regionid.Trim()))
            {
                sql2 += ",regionid";
                sql1 += "," + regionid.Trim();
            }

            if (!string.IsNullOrEmpty(binstrlen.Trim()))
            {
                sql2 += ",binstrlen";
                sql1 += " ," + binstrlen.Trim();
            }

            if (!string.IsNullOrEmpty(reghighid.Trim()))
            {
                sql2 += ",reghighid";
                sql1 += " ," + reghighid.Trim();
            }

            if (!string.IsNullOrEmpty(innerchnl.Trim()))
            {
                sql2 += ",innerchnl";
                sql1 += " ," + innerchnl.Trim();
            }

            if (!string.IsNullOrEmpty(binstrval.Trim()))
            {
                sql2 += ",binstrval";
                sql1 += " ," + binstrval.Trim();
            }
            if (!string.IsNullOrEmpty(lyrname.Trim()))
            {
                sql2 += ",lyrname";
                sql1 += ",'" + lyrname.Trim() + "'";
            }
            if (!string.IsNullOrEmpty(lyrid.Trim()))
            {
                sql2 += ",lyrid";
                sql1 += "," + lyrid.Trim();
            }


            if (!string.IsNullOrEmpty(shape.Trim()))
            {
                sql2 += ",shape";
                sql1 += ",'" + shape.Trim() + "'";
            }

            sql2 += ") values(";
            sql = sql + sql2 + sql1 + ")";



            return DbHelper.ExecuteSql(sql);
        }

        public static int AddRegion(string sid, string objectid, string channelid, string regionid, string binstrlen, string binstrval, string reghighid, string lyrname, string lyrid, string shape)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into jzjw_region(");
            sb.Append("sid,lyrname,lyrid,objectid,channelid,regionid,binstrlen,binstrval,reghighid,shape)");
            sb.Append(" values (");
            sb.Append(":sid,:lyrname,:lyrid,:objectid,:channelid,:regionid,:binstrlen,:binstrval,:reghighid,:shape)");

            /*
            OracleParameter[] parameters = {
					new OracleParameter("sid", OracleType.VarChar,50),
					new OracleParameter("lyrname", OracleType.VarChar,50),
					new OracleParameter("lyrid",OracleType.Int32),
					new OracleParameter("objectid",OracleType.Int32),
					new OracleParameter("channelid",OracleType.Int32),
					new OracleParameter("regionid",OracleType.Int32),
					new OracleParameter("binstrlen",OracleType.Int32),
					new OracleParameter("binstrval",OracleType.Int32),
					new OracleParameter("reghighid",OracleType.Int32),
					new OracleParameter("shape",OracleType.Blob)					
                                            };
             */
            //VarChar  Int32  Blob
            OracleParameter[] parameters = {
					new OracleParameter("sid", OracleDbType.Varchar2,50),
					new OracleParameter("lyrname", OracleDbType.Varchar2,50),
					new OracleParameter("lyrid",OracleDbType.Int32),
					new OracleParameter("objectid",OracleDbType.Int32),
					new OracleParameter("channelid",OracleDbType.Int32),
					new OracleParameter("regionid",OracleDbType.Int32),
					new OracleParameter("binstrlen",OracleDbType.Int32),
					new OracleParameter("binstrval",OracleDbType.Int32),
					new OracleParameter("reghighid",OracleDbType.Int32),
					new OracleParameter("shape",OracleDbType.Blob)					
                                            };


            parameters[0].Value = sid;
            parameters[1].Value = lyrname;

            if (string.IsNullOrEmpty(lyrid))
            {
                parameters[2].Value = DBNull.Value;
            }
            else
            {
                parameters[2].Value = Convert.ToInt32(lyrid);
            }

            if (string.IsNullOrEmpty(objectid))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                parameters[3].Value = Convert.ToInt32(objectid);
            }

            if (string.IsNullOrEmpty(channelid))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = Convert.ToInt32(channelid);
            }

            if (string.IsNullOrEmpty(regionid))
            {
                parameters[5].Value = DBNull.Value;
            }
            else
            {
                parameters[5].Value = Convert.ToInt32(regionid);
            }

            if (string.IsNullOrEmpty(binstrlen))
            {
                parameters[6].Value = DBNull.Value; ;
            }
            else
            {
                parameters[6].Value = Convert.ToInt32(binstrlen);
            }

            if (string.IsNullOrEmpty(binstrval))
            {
                parameters[7].Value = DBNull.Value;
            }
            else
            {
                parameters[7].Value = Convert.ToInt32(binstrval);
            }

            if (string.IsNullOrEmpty(reghighid))
            {
                parameters[8].Value = DBNull.Value;
            }
            else
            {
                parameters[8].Value = Convert.ToInt32(reghighid);
            }

            parameters[9].Value = System.Text.Encoding.Default.GetBytes(shape);
            return DbHelper.ExecuteSql(sb.ToString(), parameters);
        }

        private static string GetJson(DataSet ds)
        {
            string str = "", colName = "";
            int rowCount = 0;
            StringBuilder sb = new StringBuilder();
            if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    rowCount = dt.Rows.Count;
                    for (int i = 0; i < rowCount; i++)
                    {
                        int cols = dt.Columns.Count;
                        sb.Append("{");
                        for (int j = 0; j < cols; j++)
                        {
                            colName = dt.Columns[j].ColumnName;
                            sb.Append("\"" + colName + "\":\"" + dt.Rows[i][colName] + "\"");
                            if (j != (cols - 1)) sb.Append(",");
                        }
                        if (i == (dt.Rows.Count - 1)) sb.Append("}"); else sb.Append("},");
                    }
                    str = sb.ToString();
                }
            }

            return "{\"total\":" + rowCount + ",\"rows\":[" + str + "]}";
        }


        public static string GetModelList(NameValueCollection reqParams)
        {
            string sql = "select * from jzjw_model";
            return GetJson(DbHelper.Query(sql));
        }

        public static string GetSchemeRegion(NameValueCollection reqParams)
        {
            //20141012
            string sid = reqParams.Get("sid");
            //string STRAHLER = reqParams.Get("STRAHLER");
            string sql = "select * from jzjw_scheme where sid='" + sid + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// //获取指定方案的上游河段  Byren修改
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetSchemeRegionUpstream(NameValueCollection reqParams)
        {
            string sid = reqParams.Get("sid");
            string STRAHLER = reqParams.Get("STRAHLER");
            string sql = "select reghighid ,regionid,binstrlen,binstrval,regionidnew from jzjw_region where sid='" + sid + "' and STRAHLER>=" + STRAHLER;
            //string sql = "select reghighid ,concat('000',substr(regionid,4)) as regionid,binstrlen,binstrval,concat('000',substr(regionidnew,4)) as regionidnew from jzjw_region where sid='" + sid + "'";
            //不用regionid 前三位补0
            //string sql = "select reghighid ,concat('000',substr(regionidnew,4)) as regionid,binstrlen,binstrval,concat('000',substr(regionidnew,4)) as regionidnew from jzjw_region where sid='" + sid + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取指定方案的出口河段属性
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetSchemeRegionList(NameValueCollection reqParams)
        {
            string sid = reqParams.Get("sid");
            string sql = "select reghighid ,regionid,binstrlen,binstrval,regionidnew from JZJW_DEFINEDNODES where sid='" + sid + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取水库信息
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetReservoirInfo(NameValueCollection reqParams)
        {
            string sid = reqParams.Get("sid");
            string sql = "select SID,REGIONIDNEW,BINSTRLEN,BINSTRVAL,RNAME,ISSELECT from JZJW_reservoir where sid='" + sid + "'";
            return GetJson(DbHelper.Query(sql));
            //shape的json字符串
            /*
            string rst=GetJson(DbHelper.Query(sql));
            rst=rst.Replace("\"SHAPE\": \"{\"spatialReference\"", "\"SHAPE\": {\"spatialReference\"");
            rst = rst.Replace("\",\"RNAME\"",",\"RNAME\"");
            return rst;
             * */
        }
        /// <summary>
        /// 设置水库是否参与计算
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string SetReservoirCal(NameValueCollection reqParams)
        {
            string sql = string.Empty;
            string REGIONIDNEW = "", BINSTRLEN = "", BINSTRVAL = "", SID = "", ISSELECT = "";
            string jsonStr = reqParams.Get("rst");
            JsonObject resultsJsonObj = new JsonObject(jsonStr);
            JsonProperty jsonProperty = resultsJsonObj["rst"];
            int cnt = jsonProperty.Count;
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["SID"];
                    if (jpItem != null) { SID = jpItem.Value; }
                    jpItem = jp["REGIONIDNEW"];
                    if (jpItem != null) { REGIONIDNEW = jpItem.Value; }
                    jpItem = jp["BINSTRLEN"];
                    if (jpItem != null) { BINSTRLEN = jpItem.Value; }
                    jpItem = jp["BINSTRVAL"];
                    if (jpItem != null) { BINSTRVAL = jpItem.Value; }
                    jpItem = jp["ISSELECT"];
                    if (jpItem != null) { ISSELECT = jpItem.Value; }
                }
                sql = "update JZJW_reservoir set ISSELECT=" + ISSELECT + " where SID='" + SID + "' and REGIONIDNEW='" + REGIONIDNEW + "' and BINSTRLEN=" + BINSTRLEN + " and BINSTRVAL=" + BINSTRVAL;
                DbHelper.ExecuteSql(sql);
            }
            return "{\"msg\":\"ok\"}";
        }

        /// <summary>
        /// 添加水库出流过程
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddReservoirFlow(NameValueCollection reqParams)
        {
            /**/
            string REGIONIDNEW = reqParams.Get("REGIONIDNEW");
            string BINSTRLEN = reqParams.Get("BINSTRLEN");
            string BINSTRVAL = reqParams.Get("BINSTRVAL");
            string SID = reqParams.Get("SID");

            //测试
            /*
            string REGIONIDNEW = "111";
            string BINSTRLEN = "222";
            string BINSTRVAL = "3333";
            string SID = "444";
             */
            string jsonStrFlow = reqParams.Get("FLOW");
            //测试
            //string jsonStrFlow = "{\"flow\":[{\"SFLOW\":0.111,\"STIME\":\"2014-9-13_14:37\"},{\"SFLOW\":0.222,\"STIME\":\"2014-9-13_14:38\"},{\"SFLOW\":0.333,\"STIME\":\"2014-9-13_14:39\"},{\"SFLOW\":1.333,\"STIME\":\"2014-9-13_14:40\"},{\"SFLOW\":2.333,\"STIME\":\"2014-9-14_14:40\"},{\"SFLOW\":3.333,\"STIME\":\"2014-9-15_14:40\"},{\"SFLOW\":4.333,\"STIME\":\"2014-9-16_14:40\"},{\"SFLOW\":5.333,\"STIME\":\"2014-9-17_14:40\"},{\"SFLOW\":6.333,\"STIME\":\"2014-9-18_14:40\"},{\"SFLOW\":\"\",\"STIME\":\"\"}]}";
            JsonObject resultsJsonObj = new JsonObject(jsonStrFlow);
            JsonProperty jsonProperty = resultsJsonObj["flow"];
            string STIME = string.Empty, SFLOW = string.Empty;
            int cnt = jsonProperty.Count;
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["STIME"];
                    if (jpItem != null) { STIME = jpItem.Value; }
                    jpItem = jp["SFLOW"];
                    if (jpItem != null) { SFLOW = jpItem.Value; }
                }
                AddReservoirFlowSQL(SID, REGIONIDNEW, BINSTRLEN, BINSTRVAL, STIME, SFLOW);
            }
            return "{\"msg\":\"ok\"}";
        }
        /// <summary>
        /// 获取水库出流过程
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetReservoirFlow(NameValueCollection reqParams)
        {
            string REGIONIDNEW = reqParams.Get("REGIONIDNEW");
            string BINSTRLEN = reqParams.Get("BINSTRLEN");
            string BINSTRVAL = reqParams.Get("BINSTRVAL");
            string SID = reqParams.Get("SID");
            string sql = "select STIME,SFLOW from JZJW_reservoirFlow where SID='" + SID + "' and REGIONIDNEW='" + REGIONIDNEW + "' and BINSTRLEN=" + BINSTRLEN + " and BINSTRVAL=" + BINSTRVAL + " order by STIME";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取计算用户列表及其是否限定了流域出口
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetscmlistUser(NameValueCollection reqParams)
        {
            string sql = "select username,count(*) Ext from jzjw_userauthority group by username";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取用户的出口河段
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetuserExtent(NameValueCollection reqParams)
        {
            string username = reqParams.Get("username");
            string sql = "select * from jzjw_userauthority where username='" + username + "'";
            return GetJsonForShape(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取用户的出口河段个数
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetuserExtentCount(NameValueCollection reqParams)
        {
            string username = reqParams.Get("username");
            string sql = "select count(*) as NUM from jzjw_userauthority where username='" + username + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 设置某一用户的流域出口
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string SetUserUetent(NameValueCollection reqParams)
        {
            string sid = reqParams.Get("SID");
            string isok = reqParams.Get("ISOK");
            string USERNAME = reqParams.Get("USERNAME");
            string sql = "update jzjw_userauthority set isok='" + isok + "' where sid='" + sid + "'";
            DbHelper.ExecuteSql(sql);
            return "{\"msg\":\"ok\"}";
        }
        /// <summary>
        /// 删除某一用户的流域出口
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string DelUserUetent(NameValueCollection reqParams)
        {
            string str = "";
            string sid = reqParams.Get("SID");
            string USERNAME = reqParams.Get("USERNAME");

            string sqlAut = "delete jzjw_userauthority where sid='" + sid + "'";
            string sql = "delete jzjw_scheme where sid='" + sid + "'";
            string sqldef = "delete JZJW_DEFINEDNODES where sid='" + sid + "'";
            string sqlrgn = "delete jzjw_region where sid='" + sid + "'";
            DbHelper.ExecuteSql(sqlAut);
            DbHelper.ExecuteSql(sqldef);
            DbHelper.ExecuteSql(sqlrgn);
            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        /// <summary>
        /// 设置用户是否为计算用户
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string SetUser(NameValueCollection reqParams)
        {
            string isok = reqParams.Get("ISOK");
            string USERNAME = reqParams.Get("USERNAME");
            string sql = "update jzjw_user set roleid=" + isok + " where username='" + USERNAME + "'";
            DbHelper.ExecuteSql(sql);
            return "{\"msg\":\"ok\"}";
        }
        /// <summary>
        /// 设置某一用户的流域出口----提交河段选择
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddrgnselUser(NameValueCollection reqParams)
        {
            string jsonStr = reqParams.Get("rslt");
            //string jsonStr="{\"features\":[{\"shape\":\"{\"paths\":[[[12008327.735589257,2653246.3093173383],[12008358.657705566,2653279.945785048],[12008482.346070694,2653279.945785048],[12008513.268187003,2653313.582322569],[12008513.268187003,2653347.218929905],[12008544.190303313,2653347.218929905],[12008575.11241962,2653380.855607061],[12008606.034535928,2653380.855607061],[12008606.034535928,2653414.492354024],[12008636.956652235,2653448.129061905],[12008853.411366288,2653448.129061905],[12008884.333482604,2653414.492354024],[12008915.255598914,2653414.492354024],[12009038.943964036,2653549.0399311543],[12009038.943964036,2653582.677027218],[12009069.866080351,2653616.314193095],[12009100.78819666,2653582.677027218],[12009131.710312968,2653582.677027218],[12009162.632429276,2653616.314193095],[12009193.554545583,2653616.314193095],[12009255.398678096,2653549.0399311543],[12009379.08714333,2653549.0399311543]]]}\",\"binstrlen\":\"1780\",\"username\":\"ryq\",\"regionid\":\"111001114038006\",\"reghighid\":\"\",\"binstrval\":\"0\"},{\"shape\":\"{\"paths\":[[[12018222.80930438,2655802.8790321373],[12018315.575653303,2655903.8045713217],[12018624.79671629,2655903.8045713217],[12018655.7188326,2655937.446448588],[12018717.562965102,2655937.446448588]]]}\",\"binstrlen\":\"1751\",\"username\":\"ryq\",\"regionid\":\"111001114038006\",\"reghighid\":\"\",\"binstrval\":\"0\"},{\"shape\":\"{\"paths\":[[[11992464.69542864,2668894.810676114],[11992093.630133037,2668894.810676114],[11992000.863884222,2668995.8180280337],[11991939.0196516,2668995.8180280337]]]}\",\"binstrlen\":\"1797\",\"username\":\"ryq\",\"regionid\":\"111001114034002\",\"reghighid\":\"\",\"binstrval\":\"0\"}]}";
            string str = "", username = "";
            int rst = 0;
            JsonObject resultsJsonObj = new JsonObject(jsonStr);
            JsonProperty jsonProperty = resultsJsonObj["features"];
            int cnt = jsonProperty.Count;

            string regionid = "", binstrlen = "", binstrval = "", reghighid = "", shape = "";
            username = jsonProperty.Items[0]["username"].Value;
            //删除指定方案的出口河段
            string sqlDel = "delete from jzjw_userauthority where username ='" + username + "'";
            DbHelper.ExecuteSql(sqlDel);
            if (cnt > 0)
            {
                for (int i = 0; i < cnt; i++)
                {
                    JsonProperty jp = jsonProperty.Items[i];
                    if (jp != null)
                    {
                        JsonProperty jpItem = jp["username"];
                        if (jpItem != null) { username = jpItem.Value; }
                        jpItem = jp["binstrlen"];
                        if (jpItem != null) { binstrlen = jpItem.Value; }
                        jpItem = jp["binstrval"];
                        if (jpItem != null) { binstrval = jpItem.Value; }
                        jpItem = jp["reghighid"];
                        if (jpItem != null) { reghighid = jpItem.Value; }
                        jpItem = jp["regionid"];
                        if (jpItem != null) { regionid = jpItem.Value; }
                        jpItem = jp["shape"];
                        if (jpItem != null) { shape = jpItem.Value; }
                    }
                    //插入数据
                    if (!string.IsNullOrEmpty(username))
                        rst = AddNodesUser(username, regionid, binstrlen, binstrval, reghighid, shape);
                }
                //设置用户的角色为 计算用户 此时用户可以计算了。
                sqlDel = "update jzjw_user set roleid='1' where username='" + username + "'";
                DbHelper.ExecuteSql(sqlDel);
            }
            else
            {
                //rst = 1;
            }
            if (rst > 0)
            { str = "{\"msg\":\"ok\"}"; }
            else
            { str = "{\"msg\":\"error\"}"; }

            return str;
        }
        /// <summary>
        /// 获取用户费用
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string Getuserfee(NameValueCollection reqParams)
        {
            string username = reqParams.Get("username");
            string sid = reqParams.Get("sid");
            string sDT = reqParams.Get("sDT");
            string eDT = reqParams.Get("eDT");
            /*
           string username = "test";
           string sid ="";
           string sDT = "2015-03-05 22:53:29";
           string eDT = "2015-04-04 22:53:01";
           */
            string sql = "select USERNAME,SID,SIMSTIME,SIMETIME,MINUTEOFFSET,CORES,RIVERCOUNT,STORAGES,UPRICEDISCOUNT_C,UPRICEDISCOUNT_S,PRICE_C,PRICE_S,PRICE_TOTAL,LEVELNAME_USER,LEVELNAME_SID " +
                "from hgcom.usersidprices where SIMSTIME between to_date('" + sDT + "','yyyy-mm-dd hh24:mi:ss') and to_date('" + eDT + "','yyyy-mm-dd hh24:mi:ss')";
            if (!string.IsNullOrEmpty(sid))
            {
                sql += " and SID='" + sid + "'";
            }
            if (!string.IsNullOrEmpty(username))
                sql += " and USERNAME='" + username + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 获取用户费用单价
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetFeeDesc(NameValueCollection reqParams)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("{\"obj\":[");
            string sql = "select LEVELUSERID,LEVELSIDID,UPRICECORES,UPRICEDISCOUNT_C from hgcom.upricecommit";
            sb.Append(GetJson(DbHelper.Query(sql)));
            sb.Append(",");
            sql = "select LEVELUSERID,LEVELSIDID,UPRICESTORAGE,UPRICEDISCOUNT_S from hgcom.upricestorage";
            sb.Append(GetJson(DbHelper.Query(sql)));
            sb.Append("]}");
            return sb.ToString();
        }
        //管理员设置用户费用单价
        public static string SetFeeDesc(NameValueCollection reqParams)
        {
            /*
            string datatype = "btnEdit_S";
            string pLEVELUSERID = "1";
            string pLEVELSIDID = "1";
            string pUPRICE = "1";
            string pUPRICEDISCOUNT = "0.8";
           */
            string datatype = reqParams.Get("datatype");
            string pLEVELUSERID = reqParams.Get("pLEVELUSERID");
            string pLEVELSIDID = reqParams.Get("pLEVELSIDID");
            string pUPRICE = reqParams.Get("pUPRICE");
            string pUPRICEDISCOUNT = reqParams.Get("pUPRICEDISCOUNT");

            string sql = "";
            DateTime dt = DateTime.Now;
            switch (datatype)
            {
                case "btnAdd":
                    sql = "insert into hgcom.upricecommit(LEVELUSERID,LEVELSIDID,UPRICECORES,UPRICEDISCOUNT_C,ENABLEDATE,DISENABLEDATE) " +
                        "values ('" + pLEVELUSERID + "','" + pLEVELSIDID + "'," + pUPRICE + "," + pUPRICEDISCOUNT + ",to_date('" + dt + "','yyyy-mm-dd hh24:mi:ss')" +
                        ",to_date('" + dt + "','yyyy-mm-dd hh24:mi:ss'))";
                    break;
                case "btnEdit":
                    sql = "update hgcom.upricecommit set UPRICECORES=" + pUPRICE + ",UPRICEDISCOUNT_C=" + pUPRICEDISCOUNT + " where LEVELUSERID='" + pLEVELUSERID + "' and LEVELSIDID='" + pLEVELSIDID + "'";
                    break;
                case "btnAdd_S":
                    sql = "insert into hgcom.upricestorage(LEVELUSERID,LEVELSIDID,UPRICESTORAGE,UPRICEDISCOUNT_S,ENABLEDATE,DISENABLEDATE) " +
                        "values ('" + pLEVELUSERID + "','" + pLEVELSIDID + "'," + pUPRICE + "," + pUPRICEDISCOUNT + ",to_date('" + dt + "','yyyy-mm-dd hh24:mi:ss')" +
                        ",to_date('" + dt + "','yyyy-mm-dd hh24:mi:ss'))";
                    break;
                case "btnEdit_S":
                    sql = "update hgcom.upricestorage set UPRICESTORAGE=" + pUPRICE + ",UPRICEDISCOUNT_S=" + pUPRICEDISCOUNT + " where LEVELUSERID='" + pLEVELUSERID + "' and LEVELSIDID='" + pLEVELSIDID + "'";
                    break;
            }
            if (DbHelper.ExecuteSql(sql) > 0)
            {
                return "{\"msg\":\"ok\"}";
            }
            else
                return "{\"msg\":\"error\"}";
        }
        //导入雨量站点
        public static string AddRainS(NameValueCollection reqParams)
        {
            string SID = reqParams.Get("SID");
            string jsonStrRainS = reqParams.Get("RAINS");
            //测试
            //string jsonStrRain = "{\"rain\":[{\"ETIME\":\"2014-9-13_14:37\",\"ID\":1,\"STIME\":\"2014-9-13_14:37\",\"P\":0.111},{\"ETIME\":\"2014-9-13_14:38\",\"ID\":2,\"STIME\":\"2014-9-13_14:37\",\"P\":0.222},{\"ETIME\":\"2014-9-13_14:39\",\"ID\":3,\"STIME\":\"2014-9-13_14:37\",\"P\":0.333},{\"ETIME\":\"2014-9-13_14:40\",\"ID\":4,\"STIME\":\"2014-9-13_14:37\",\"P\":0.444}]}";
            JsonObject resultsJsonObj = new JsonObject(jsonStrRainS);
            JsonProperty jsonProperty = resultsJsonObj["rains"];
            string STNM = string.Empty, X = string.Empty, ID = string.Empty, Y = string.Empty;
            int cnt = jsonProperty.Count;
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["ID"];
                    if (jpItem != null) { ID = jpItem.Value; }
                    jpItem = jp["STNM"];
                    if (jpItem != null) { STNM = jpItem.Value; }
                    jpItem = jp["X"];
                    if (jpItem != null) { X = jpItem.Value; }
                    jpItem = jp["Y"];
                    if (jpItem != null) { Y = jpItem.Value; }
                }
                AddRAINSSQL(SID, ID, STNM, X, Y);
            }
            return "{\"msg\":\"ok\"}";
        }
        //导入雨量站点
        public static int AddRAINSSQL(string SID, string ID, string STNM, string X, string Y)
        {
            string sql = "select count(*) from nametabhour where id=" + ID + " and SID='" + SID + "'";
            if (DbHelper.GetSingle(sql).ToString() == "0")
            {
                sql = "insert into nametabhour(SID,ID,STNM,X,Y) values('" + SID + "'," + ID + ",'" + STNM + "'," + X + "," + Y + ")";
                DbHelper.ExecuteSql(sql);
            }
            sql = "select count(*) from nametabhour_all where id=" + ID;
            if (DbHelper.GetSingle(sql).ToString() == "0")
            {
                sql = "insert into nametabhour_all(ID,STNM,X,Y) values(" + ID + ",'" + STNM + "'," + X + "," + Y + ")";
                DbHelper.ExecuteSql(sql);
            }
            return 1;
        }
        //获取雨量站点
        public static string GetRainS(NameValueCollection reqParams)
        {
            string SID = reqParams.Get("sid");
            string sql = "select sid,id,stnm,x,y from nametabhour where sid='" + SID + "'";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 添加降雨数据
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddRain(NameValueCollection reqParams)
        {
            string SID = reqParams.Get("SID");
            //测试
            /*         
            string SID = "444";
             */
            string jsonStrRain = reqParams.Get("RAIN");
            //测试
            //string jsonStrRain = "{\"rain\":[{\"ETIME\":\"2014-9-13_14:37\",\"ID\":1,\"STIME\":\"2014-9-13_14:37\",\"P\":0.111},{\"ETIME\":\"2014-9-13_14:38\",\"ID\":2,\"STIME\":\"2014-9-13_14:37\",\"P\":0.222},{\"ETIME\":\"2014-9-13_14:39\",\"ID\":3,\"STIME\":\"2014-9-13_14:37\",\"P\":0.333},{\"ETIME\":\"2014-9-13_14:40\",\"ID\":4,\"STIME\":\"2014-9-13_14:37\",\"P\":0.444}]}";
            JsonObject resultsJsonObj = new JsonObject(jsonStrRain);
            JsonProperty jsonProperty = resultsJsonObj["rain"];
            string STIME = string.Empty, ETIME = string.Empty, ID = string.Empty, P = string.Empty;
            int cnt = jsonProperty.Count;
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];
                if (jp != null)
                {
                    JsonProperty jpItem = jp["ID"];
                    if (jpItem != null) { ID = jpItem.Value; }
                    jpItem = jp["STIME"];
                    if (jpItem != null) { STIME = jpItem.Value; }
                    jpItem = jp["ETIME"];
                    if (jpItem != null) { ETIME = jpItem.Value; }
                    jpItem = jp["P"];
                    if (jpItem != null) { P = jpItem.Value; }
                }
                AddRAINSQL(SID, ID, STIME, ETIME, P);
            }
            return "{\"msg\":\"ok\"}";
        }
        //导入降雨数据
        public static int AddRAINSQL(string SID, string ID, string STIME, string ETIME, string P)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into jzjw_rains(");
            sb.Append("SID,ID,STIME,ETIME,P)");
            sb.Append(" values (");
            sb.Append(":SID,:ID,:STIME,:ETIME,:P)");

            //OracleDbType   OracleType.VarChar   Number  Clob
            OracleParameter[] parameters = {
					new OracleParameter("SID",OracleDbType.Varchar2,50),					
					new OracleParameter("ID",OracleDbType.Double,50),
					new OracleParameter("STIME",OracleDbType.Date),
					new OracleParameter("ETIME",OracleDbType.Date),
					new OracleParameter("P",OracleDbType.Double)};
            parameters[0].Value = SID;
            if (string.IsNullOrEmpty(ID))
            {
                parameters[1].Value = DBNull.Value;
            }
            else
            {
                parameters[1].Value = ID; //Convert.ToInt32(regionid);
            }
            if (string.IsNullOrEmpty(STIME))
            {
                parameters[2].Value = DBNull.Value;
            }
            else
            {
                parameters[2].Value = Convert.ToDateTime(STIME.Replace("_", " ") + ":00");

            }
            if (string.IsNullOrEmpty(ETIME))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                //parameters[3].Value = ETIME;
                parameters[3].Value = Convert.ToDateTime(ETIME.Replace("_", " ") + ":00");
            }
            if (string.IsNullOrEmpty(P))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = P;
            }
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }
        /// <summary>
        /// 设置某一用户的流域出口----提交河段选择
        /// </summary>
        /// <param name="username"></param>
        /// <param name="regionid"></param>
        /// <param name="binstrlen"></param>
        /// <param name="binstrval"></param>
        /// <param name="reghighid"></param>
        /// <param name="shape"></param>
        /// <returns></returns>
        public static int AddNodesUser(string username, string regionid, string binstrlen, string binstrval, string reghighid, string shape)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into jzjw_userauthority(");
            sb.Append("username,regionid,binstrlen,binstrval,reghighid,shape,regionidnew)");
            sb.Append(" values (");
            sb.Append(":username,:regionid,:binstrlen,:binstrval,:reghighid,:shape,:regionidnew)");

            OracleParameter[] parameters = {
					new OracleParameter("username",OracleDbType.Varchar2,50),					
					new OracleParameter("regionid",OracleDbType.Double),
					new OracleParameter("binstrlen",OracleDbType.Double),
					new OracleParameter("binstrval",OracleDbType.Double),
					new OracleParameter("reghighid",OracleDbType.Double),					
					new OracleParameter("shape",OracleDbType.Clob),
                    new OracleParameter("regionidnew",OracleDbType.Varchar2)};
            parameters[0].Value = username;
            if (string.IsNullOrEmpty(regionid))
            {
                parameters[1].Value = DBNull.Value;
            }
            else
            {
                parameters[1].Value = regionid;
            }
            if (string.IsNullOrEmpty(binstrlen))
            {
                parameters[2].Value = DBNull.Value;
            }
            else
            {
                parameters[2].Value = binstrlen;
            }
            if (string.IsNullOrEmpty(binstrval))
            {
                parameters[3].Value = DBNull.Value;
            }
            else
            {
                parameters[3].Value = binstrval;
            }
            if (string.IsNullOrEmpty(reghighid))
            {
                parameters[4].Value = DBNull.Value;
            }
            else
            {
                parameters[4].Value = reghighid;
            }
            parameters[5].Value = shape;
            parameters[6].Value = regionid;
            int i = DbHelper.ExecuteSql(sb.ToString(), parameters);
            return i;
        }
        private static string GetJsonForShape(DataSet ds)
        {
            string str = "", colName = "";
            int rowCount = 0;
            StringBuilder sb = new StringBuilder();
            if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    rowCount = dt.Rows.Count;
                    for (int i = 0; i < rowCount; i++)
                    {
                        int cols = dt.Columns.Count;
                        sb.Append("{");
                        for (int j = 0; j < cols; j++)
                        {
                            colName = dt.Columns[j].ColumnName;
                            if (colName == "SHAPE")
                            {
                                sb.Append("\"" + colName + "\":" + dt.Rows[i][colName]);
                            }
                            else
                            {
                                sb.Append("\"" + colName + "\":\"" + dt.Rows[i][colName] + "\"");
                            }
                            if (j != (cols - 1)) sb.Append(",");
                        }
                        if (i == (dt.Rows.Count - 1)) sb.Append("}"); else sb.Append("},");
                    }
                    str = sb.ToString();
                }
            }

            return "{\"total\":" + rowCount + ",\"rows\":[" + str + "]}";
        }

        public static string test(NameValueCollection reqParams)
        {
            //string sid = reqParams.Get("sid");
            string sql = "select count(*) from gdn2.gdn2_asia_river1";
            return GetJson(DbHelper.Query(sql));
        }
        /// <summary>
        /// 默认自动设置模型参数
        /// </summary>
        /// <returns></returns>
        public static void SetSchemeParams(string sid, string name)
        {
            string stime = DateTime.Now.AddDays(-2).ToString("yyyy/MM/dd 00:00:00");
            string etime = DateTime.Now.AddDays(+3).ToString("yyyy/MM/dd 00:00:00");
            string rainfall = "雨量站";
            string runoff = "新安江模型";
            string river = "扩散波模型";
            string preheat = "15";
            /*
            string sid = reqParams.Get("sid");
            string stime = reqParams.Get("stime");
            string etime = reqParams.Get("etime");
            string rainfall = reqParams.Get("rainfall");
            string runoff = reqParams.Get("runoff");
            string river = reqParams.Get("river");
            string name = reqParams.Get("name");
            */
            //测试数据ByRen
            /*  
             string sid = "20140621HP007";
             string stime = "2014/5/10 0:00:00";
             string etime = "2014/5/14 0:00:00";
             string rainfall = "雨量站";
             string runoff = "新安江模型";
             string river = "扩散波模型";
             string name="R2107";              
            */

            string sql;
            if (name != "")
                sql = "update jzjw_scheme set starttime=to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss')" + ",endtime=to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss')"
                + ",rainfalldata='" + rainfall + "',runoffmodel='" + runoff + "',name='" + name + "',rivermodel='" + river + "',preheat=" + preheat
                + " where sid='" + sid + "'";
            else
                sql = "update jzjw_scheme set starttime=to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss')" + ",endtime=to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss')"
                + ",rainfalldata='" + rainfall + "',runoffmodel='" + runoff + "',rivermodel='" + river + "',preheat=" + preheat
                + " where sid='" + sid + "'";
            DbHelper.ExecuteSql(sql);

        }

        /// <summary>
        /// 方案参数设置
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string SetSchemeParams(NameValueCollection reqParams)
        {

            string sid = reqParams.Get("sid");
            string stime = reqParams.Get("stime");
            string etime = reqParams.Get("etime");
            string rainfall = reqParams.Get("rainfall");
            string runoff = reqParams.Get("runoff");
            string river = reqParams.Get("river");
            string name = reqParams.Get("name");

            string preheat = reqParams.Get("preheat");
            string org = reqParams.Get("org");
            string stype = reqParams.Get("stype");

            if (string.IsNullOrEmpty(preheat))
                preheat = "3";
            //测试数据ByRen
            /*  
             string sid = "20140621HP007";
             string stime = "2014/5/10 0:00:00";
             string etime = "2014/5/14 0:00:00";
             string rainfall = "雨量站";
             string runoff = "新安江模型";
             string river = "扩散波模型";
             string name="R2107";              
            */

            string sql;
            if (name != "")
                sql = "update jzjw_scheme set starttime=to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss')" + ",endtime=to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss')"
                + ",rainfalldata='" + rainfall + "',runoffmodel='" + runoff + "',name='" + name + "',rivermodel='" + river + "',preheat=" + preheat
                + ",org='" + org + "',stype='" + stype + "' where sid='" + sid + "'";
            else
                sql = "update jzjw_scheme set starttime=to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss')" + ",endtime=to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss')"
                + ",rainfalldata='" + rainfall + "',runoffmodel='" + runoff + "',rivermodel='" + river + "',preheat=" + preheat
                + ",org='" + org + "',stype='" + stype + "' where sid='" + sid + "'";
            string str = "";
            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }

        public static string GetSchemeRegionShapeList(NameValueCollection reqParams)
        {
            string sid = reqParams.Get("sid");
            string sql = "select shape from jzjw_definednodes where sid='" + sid + "'";
            DataSet ds = DbHelper.Query(sql);

            string str = "";
            int rowCount = 0;
            StringBuilder sb = new StringBuilder();
            if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                if (dt != null && dt.Rows.Count > 0)
                {
                    rowCount = dt.Rows.Count;
                    //sb.Append("[");
                    for (int i = 0; i < rowCount; i++)
                    {

                        string ss = (string)dt.Rows[i]["shape"];
                        sb.Append(ss);

                        if (i == (dt.Rows.Count - 1)) sb.Append(""); else sb.Append(",");
                    }
                    //sb.Append("]");
                    str = sb.ToString();
                }
            }

            //sql = "select shape from jzjw_region where sid='" + sid + "'";
            //string str1 = "";
            //ds = DbHelper.Query(sql);
            //StringBuilder sb1 = new StringBuilder();
            //if (ds != null && ds.Tables != null && ds.Tables.Count > 0)
            //{
            //    DataTable dt = ds.Tables[0];
            //    if (dt != null && dt.Rows.Count > 0)
            //    {
            //        rowCount = dt.Rows.Count;
            //        //sb.Append("[");
            //        for (int i = 0; i < rowCount; i++)
            //        {
            //            byte[] shp = (byte[])dt.Rows[i]["shape"];
            //            string ss = System.Text.Encoding.Default.GetString(shp);
            //            sb1.Append(ss);
            //            if (i == (dt.Rows.Count - 1)) sb1.Append(""); else sb1.Append(";");
            //        }
            //        //sb.Append("]");
            //        str1 = sb1.ToString();
            //    }
            //}


            //return "{\"upstream\":\"" + str1 + "\",\"rows\":[" + str + "]}";


            return "{\"total\":" + rowCount + ",\"rows\":[" + str + "]}";

        }


        public static string DoLogin(NameValueCollection reqParams)
        {
            string strResult = "";
            string uname = reqParams.Get("uname");
            string pwd = reqParams.Get("pwd");

            string sql = "select username from jzjw_user where username='" + uname + "' and password='" + pwd + "'";

            object obj = DbHelper.GetSingle(sql);
            if (obj != null)
            {
                if (!string.IsNullOrEmpty(obj as string))
                {
                    strResult = "{\"flag\":\"YES\"}";
                }
                else
                {
                    //strResult = "{\"msg\":\"用户名或密码有误!\",\"flag\":\"NO\"}";
                    strResult = "{\"flag\":\"NO\"}";
                }
            }
            else
            {
                //strResult = "{\"msg\":\"用户名或密码有误!\",\"flag\":\"NO\"}";
                strResult = "{\"flag\":\"NO\"}";
            }
            return strResult;
        }
        public static string DoUserRegister(NameValueCollection reqParams)
        {
            string str;

            string username = reqParams.Get("username");
            string password = reqParams.Get("password");
            string email = reqParams.Get("email");
            string fullname = reqParams.Get("fullname");
            string education = reqParams.Get("education");

            string country = reqParams.Get("country");
            string province = reqParams.Get("province");
            string company = reqParams.Get("company");
            string address = reqParams.Get("address");
            string zipcode = reqParams.Get("zipcode");
            string telephone = reqParams.Get("telephone");
            /*
            string username = "1";
            string password = "1";
            string email = "1";
            string fullname = "1";
            string education = "1";

            string country = "1";
            string province = "1";
            string company = "1";
            string address = "1";
            string zipcode = "1";
            string telephone = "1";
             */
            //string roleid = reqParams.Get("roleid");
            string sql = "insert into jzjw_user(username,password,email,fullname,education,country,province,company,address,zipcode,telephone) " +
                "values ('" + username + "','" + password + "','" + email + "','" + fullname + "','" + education + "','" + country + "','" + province + "','" +
                company + "','" + address + "','" + zipcode + "','" + telephone + "')";

            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        /// <summary>
        /// 纵断面
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string GetLineChartData(NameValueCollection reqParams)
        {
            string strResult = "";
            /**/
            string stime = reqParams.Get("stime");
            string etime = reqParams.Get("etime");
            string reghighid = reqParams.Get("reghighid");
            string binstrlen = reqParams.Get("binstrlen");
            string binstrval = reqParams.Get("binstrval");
            string regionid = reqParams.Get("regionid");
            //前三位替换成341
            //regionid = "341" + regionid.Substring(3);
            string name = reqParams.Get("type");
            string SCCD = reqParams.Get("SCCD");
            string inter = reqParams.Get("inter");


            /*
            string stime="2015-07-01 00:00:00";
            string etime="2015-07-31 00:00:00";
            string reghighid = "";
            string binstrlen = "3374";
            string binstrval = "1";
            string regionid = "419001294109";
            //前三位替换成341
            //regionid = "341" + regionid.Substring(3);
            string name = "QOUTPUT";
            string SCCD = "20150628HP003";
            string inter ="60";
            */

            if (name == "V")
            {
                //纵断面
                strResult = GetLineChartVSection(reghighid, regionid, binstrval, binstrlen, name);
            }
            else
            {
                //水位过程和流量过程
                //strResult = GetLineChartData(regionid, binstrval, binstrlen, name);
                //strResult = GetLineChartDataNew(reghighid, regionid, binstrval, binstrlen, name, SCCD);

                strResult = GetLineChartDataNew2(stime, etime, reghighid, regionid, binstrval, binstrlen, name, SCCD, inter);

            }
            return strResult;
        }
        /// <summary>
        /// 纵断面 ByRen20140317
        /// </summary>
        /// <param name="reghighid"></param>
        /// <param name="regionid"></param>
        /// <param name="binstrval"></param>
        /// <param name="binstrlen"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string GetLineChartVSection(string reghighid, string regionid, string binstrval, string binstrlen, string name)
        {
            //string regionidnew = GetNewRegionId(reghighid, regionid);
            string regionidnew = regionid;
            string continentName = "";
            //获取大洲
            continentName = ConName(regionidnew);

            //string sql = "select regioncode,upeleva,downeleva,chnl_len,binstrlen from hg02.gdn2_asia_river1 where " +
            //    "regioncode='" + regionidnew + "' and binstrlen<=" + binstrlen + " and binstrval=gdem.get_route_bsv(" +
            //    binstrval + ",binstrlen," + binstrlen + ") order by binstrlen desc";
            string sql = "select regioncode,upeleva,downeleva,chnl_len,binstrlen from GDN2." + continentName + "where " +
                    "regioncode='" + regionidnew + "' and binstrlen<=" + binstrlen + " and binstrval=get_route_bsv(" +
                    binstrval + ",binstrlen," + binstrlen + ") order by binstrlen desc";
            /*纵断面SQL优化
             *如果length(regionidnew)>9 那么从上一个查询中得到最小的binstrlenA，
             *regionidnew去掉后三位，按照binstrval=0，binstrlen<=binstrlenA 按照上面的语句再执行得到一个集合，
             *依次类推，得到N个集合，N个集合按照binstrlen倒序排序清
             *测试纵断面查询功能，保证每个河段都能溯源。
             */
            //string strConn = "Data Source=dwm474;User ID=hydroglobal;Password=hydroglobal474;";
            ///string strConn = "Data Source=101.6.54.4/orcl;User ID=hydroglobal;Password=hg474;";
            //string strConn = "Data Source=101.6.54.4/orcl;User ID=hg02;Password=hg02;";

            StringBuilder sb = new StringBuilder();
            ///IDataBase myDb = DBFactory.GetDBInstance(strConn);
            ///DataTable dt = myDb.GetDataTable(sql);
            DataTable dt = DbHelper.Query(sql).Tables[0];
            //复制Datatable
            DataTable dtNew = dt.Copy();
            if (dtNew.Rows.Count > 0)
            {
                while (dtNew.Rows[0]["regioncode"].ToString().Length > 9)
                {

                    //DataTable dtTmp = GetDTByVSection(myDb, dtNew.Rows[0]["regioncode"].ToString().Substring(0, dtNew.Rows[0]["regioncode"].ToString().Length - 3), dtNew.Rows[0]["binstrlen"].ToString());
                    DataTable dtTmp = GetDTByVSection(dtNew.Rows[0]["regioncode"].ToString().Substring(0, dtNew.Rows[0]["regioncode"].ToString().Length - 3), dtNew.Rows[0]["binstrlen"].ToString());
                    //将dtTmp集合添加到dt集合最后
                    foreach (DataRow dr in dtTmp.Rows)
                    {
                        dt.Rows.Add(dr.ItemArray);
                    }
                    dtNew = dtTmp.Copy();
                }
            }
            try
            {
                //object obj= DbHelper.GetSingle(sql);
                //IDataBase myDb = DBFactory.GetDBInstance(strConn);
                //DataTable dt = myDb.GetDataTable(sql);

                //最后根据dt来得到最总的DataTable集合
                if (dt != null && dt.Rows.Count > 0)
                {
                    double x = 0.0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double upeleva = Convert.ToInt32(dt.Rows[i]["upeleva"]);
                        double downeleva = Convert.ToInt32(dt.Rows[i]["downeleva"]);
                        double chnllen = Convert.ToDouble(dt.Rows[i]["chnl_len"]);
                        if (i == (dt.Rows.Count - 1))
                        {
                            sb.Append("{\"DAY\":" + x + ",\"WH\":" + downeleva + "}");
                        }
                        else
                        {
                            sb.Append("{\"DAY\":" + x + ",\"WH\":" + upeleva + "},");
                        }

                        x = x + chnllen;

                    }
                }
            }
            catch (Exception e)
            {

            }

            return "{\"rows\":[" + sb.ToString() + "]}";
        }
        /*
        /// <summary>
        /// GetLineChartVSection1保留之前的方法
        /// </summary>
        /// <param name="reghighid"></param>
        /// <param name="regionid"></param>
        /// <param name="binstrval"></param>
        /// <param name="binstrlen"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string GetLineChartVSection1(string reghighid, string regionid, string binstrval, string binstrlen, string name)
        {
            //string regionidnew = GetNewRegionId(reghighid, regionid);
            string regionidnew = regionid;
            string sql = "select regionidnew,upeleva,downeleva,chnl_len from hg02.gdn2_asia_river1 where " +
                "regionidnew='" + regionidnew + "' and binstrlen<=" + binstrlen + " and binstrval=gdem.get_route_bsv(" +
                binstrval + ",binstrlen," + binstrlen + ") order by binstrlen desc";


            //纵断面SQL优化
            //string strConn = "Data Source=dwm474;User ID=hydroglobal;Password=hydroglobal474;";
            string strConn = "Data Source=101.6.54.4/orcl;User ID=hydroglobal;Password=hg474;";
            StringBuilder sb = new StringBuilder();
            try
            {
                //object obj= DbHelper.GetSingle(sql);
                //之前未被注释掉
                //IDataBase myDb = DBFactory.GetDBInstance(strConn);
                DataTable dt = myDb.GetDataTable(sql);

                if (dt != null && dt.Rows.Count > 0)
                {
                    double x = 0.0;
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        double upeleva = Convert.ToInt32(dt.Rows[i]["upeleva"]);
                        double downeleva = Convert.ToInt32(dt.Rows[i]["downeleva"]);
                        double chnllen = Convert.ToDouble(dt.Rows[i]["chnl_len"]);
                        if (i == (dt.Rows.Count - 1))
                        {
                            sb.Append("{\"DAY\":" + x + ",\"WH\":" + downeleva + "}");
                        }
                        else
                        {
                            sb.Append("{\"DAY\":" + x + ",\"WH\":" + upeleva + "},");
                        }

                        x = x + chnllen;

                    }
                }
            }
            catch (Exception e)
            {

            }

            return "{\"rows\":[" + sb.ToString() + "]}";
        }
        */

        /// <summary>
        /// 纵断面查询Length（regionidnew）<9位的集合ByRen20140317
        /// </summary>
        /// <param name="myDb"></param>
        /// <param name="regionidnew"></param>
        /// <param name="binstrlenMin"></param>
        /// <returns></returns>
        private static DataTable GetDTByVSection(string regionidnew, string binstrlenMin)
        {
            /*如果length(regionidnew)>9 那么从上一个查询中得到最小的binstrlenA，
           *regionidnew去掉后三位，按照binstrval=0，binstrlen<=binstrlenA 按照上面的语句再执行得到一个集合，
           *依次类推，得到N个集合，N个集合按照binstrlen倒序排序清
           *测试纵断面查询功能，保证每个河段都能溯源。
           */
            string continentName = "";
            //获取大洲
            continentName = ConName(regionidnew);

            string sql = "select regioncode,upeleva,downeleva,chnl_len,binstrlen from GDN2." + continentName + "where " +
               "regioncode='" + regionidnew + "' and binstrlen<=" + binstrlenMin + " and binstrval=0 order by binstrlen desc";
            DataTable dt = DbHelper.Query(sql).Tables[0];
            return dt;
        }
        /*
        private static string GetLineChartData(string name)
        {

            return GetLineChartData("", "", "", name);
        }
         */

        /*
        /// <summary>
        /// 水位过程和流量过程
        /// </summary>
        /// <param name="regionid"></param>
        /// <param name="bsvalue"></param>
        /// <param name="bslen"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string GetLineChartData(string regionid, string bsvalue, string bslen, string name)
        {
            string str = "";
            //string strConn = "Data Source=dwm474;User ID=bhb;Password=bhb;";
            string strConn = "Data Source=101.6.54.4/orcl;User ID=bhb;Password=bhb;";
            //bhb/bhb@dwm474
            IDataBase myDb = DBFactory.GetDBInstance(strConn);
            //string sql = "select * from discharge where regionindex=" + regionid + " and bsvalue=" + bsvalue + " and bslength=" + bslen;
            string sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24),'yyyy-mm-dd HH24') as day ," + name + " as wh from discharge where regionindex=" + regionid + " and bsvalue=" + bsvalue + " and bslength=" + bslen; ;
            // if (name == "") name = "QOUTPUT";
            //string sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24),'yyyy-mm-dd HH24') as day," + name + " as wh from discharge where houroffset between 410000 and 444095 and " + name + " >0 and bslength=1 order by day";

            str = GetJson(myDb.GetDataSet(sql));
            return str;
        }
         */
        /// <summary>
        /// 流量过程和水位过程 nameByRen 20140513
        /// </summary>
        /// <param name="regionid"></param>
        /// <param name="bsvalue"></param>
        /// <param name="bslen"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string GetLineChartDataNew(string reghighid, string regionid, string bsvalue, string bslen, string name, string SCCD)
        {
            //string regionidnew = GetNewRegionId(reghighid, regionid);
            string regionidnew = regionid;
            //测试用
            //string regionidnew = "339001135021";
            string str = "";
            string sql = "";
            //string strConn = "Data Source=dwm474;User ID=bhb;Password=bhb;";
            //Data Source = dwm474; User ID = hydroglobal; Password = hydroglobal474;
            //string strConn = "Data Source=101.6.54.4/dwm474;User ID=hydroglobal;Password=hg474;";
            ///string strConn = "Data Source=101.6.54.4/orcl;User ID=hydroglobal;Password=hg474;";

            ///IDataBase myDb = DBFactory.GetDBInstance(strConn);
            //string sql = "select * from discharge where regionindex=" + regionid + " and bsvalue=" + bsvalue + " and bslength=" + bslen;
            if (name == "H")
            {
                //水位过程
                sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ,H as wh from hgcom.discharge where regionidnew=" + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " order by day";
            }
            else
            {
                //流量过程
                sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ,Qoutput as wh from hgcom.discharge where regionidnew=" + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " order by day";
            }
            // if (name == "") name = "QOUTPUT";
            //string sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24),'yyyy-mm-dd HH24') as day," + name + " as wh from discharge where houroffset between 410000 and 444095 and " + name + " >0 and bslength=1 order by day";

            ///str = GetJson(myDb.GetDataSet(sql));
            str = GetJson(DbHelper.Query(sql));
            return str;
        }
        /// <summary>
        /// 流量过程和水位过程 nameByRen 20150726
        /// </summary>
        /// <param name="regionid"></param>
        /// <param name="bsvalue"></param>
        /// <param name="bslen"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private static string GetLineChartDataNew2(string stime, string etime, string reghighid, string regionid,
            string bsvalue, string bslen, string name, string SCCD, string inter)
        {
            if (inter == "60")
            {
                inter = "0";
            }
            string st = "to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60";
            string startTime = "";
            string endTime = "";
            string sendTime = "";

            string regionidnew = regionid;
            string str = "";
            string sql = "";
            if (name != "H")
            {
                //流量过程
                name = "Qoutput";
            }

            //当前方案的类型
            string sqltmp = "select stype from hgmgr.jzjw_scheme where sid='" + SCCD + "'";
            string stype = DbHelper.GetSingle(sqltmp).ToString();
            //方案模拟或实时模拟
            sql = "select rownum,a.* from (select starttime,endtime,max(simetime) simetime from hgcom.jzjw_schememgr where " +
                "simetime is not NULL and sid ='" + SCCD + "' group by starttime,endtime order by simetime desc) a where rownum=1";
            DataTable dt = DbHelper.Query(sql).Tables[0];
            DataSet ds = new DataSet();
            if (dt.Rows.Count == 1)
            {
                startTime = dt.Rows[0]["starttime"].ToString();
                endTime = dt.Rows[0]["endtime"].ToString();
                sendTime = dt.Rows[0]["simetime"].ToString();
                if (stype == "SIMCON")
                {
                    //连续模拟方案
                    //若是连续模拟，如当前是0720号，时间段为0715-0725，则取数为0715-0720从discharge表中取数，0720-0725从discharge表中最新方案的计算结果中取数；
                    //若时间段为0715-0719则只从dischargecon表中取数;若时间段为0720-0725，则从discharge表中最新方案的计算结果中取数。若非连续模拟方案，
                    //则从discharge表中最新方案的计算结果中取数。
                    DateTime dtnow1 = DateTime.Now;
                    DateTime dtnow = new DateTime(dtnow1.Year, dtnow1.Month, dtnow1.Day, 0, 0, 0);

                    DateTime dtstime = Convert.ToDateTime(stime);
                    DateTime dtetime = Convert.ToDateTime(etime);
                    if (dtnow.Ticks > dtstime.Ticks && dtnow.Ticks < dtetime.Ticks)
                    {
                        //最新方案计算结果表取结果
                        sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ," + name + " as wh from hgcom.discharge  where regionidnew="
                            + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " and minuteoffset=" + inter + " and simetime=to_date('" + sendTime + "','yyyy-mm-dd hh24:mi:ss')" + " and " + st + " > "
                            + "to_date('" + dtnow.ToString() + "','yyyy-mm-dd hh24:mi:ss') and " + st + " <= to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss') order by day";
                        DataTable dt1 = DbHelper.Query(sql).Tables[0];
                        //从dischargecon表中取结果
                        sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ," + name + " as wh from hgcom.dischargecon  where regionidnew="
                            + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " and minuteoffset=" + inter + " and " + st + " >= "
                            + "to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss') and " + st + " <= to_date('" + dtnow.ToString() + "','yyyy-mm-dd hh24:mi:ss') order by day";
                        dt = DbHelper.Query(sql).Tables[0];
                        object[] obj = new object[2];
                        for (int i = 0; i < dt1.Rows.Count; i++)
                        {
                            dt1.Rows[i].ItemArray.CopyTo(obj, 0);
                            dt.Rows.Add(obj);
                        }
                        ds.Tables.Add(dt.Copy());

                    }
                    else if (dtnow.Ticks >= dtetime.Ticks)
                    {
                        //从dischargecon表中取结果
                        sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ," + name + " as wh from hgcom.dischargecon  where regionidnew="
                            + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " and minuteoffset=" + inter + " and " + st + " >= "
                            + "to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss') and " + st + " <= to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss') order by day";
                        ds = DbHelper.Query(sql);

                    }
                    else if (dtnow.Ticks <= dtstime.Ticks)
                    {
                        //最新方案计算结果表取结果
                        sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ," + name + " as wh from hgcom.discharge  where regionidnew="
                            + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " and minuteoffset=" + inter + " and simetime=to_date('" + sendTime + "','yyyy-mm-dd hh24:mi:ss')" + " and " + st + " > "
                            + "to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss') and " + st + " <= to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss') order by day";
                        ds = DbHelper.Query(sql);
                    }

                }
                else
                {
                    sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ," + name + " as wh from hgcom.discharge  where regionidnew="
                        + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " and minuteoffset=" + inter + " and simetime=to_date('" + sendTime + "','yyyy-mm-dd hh24:mi:ss')" + " and " + st + " between "
                        + "to_date('" + stime + "','yyyy-mm-dd hh24:mi:ss') and to_date('" + etime + "','yyyy-mm-dd hh24:mi:ss') order by day";
                    ds = DbHelper.Query(sql);
                }
            }
            return "{\"sTime\":\"" + startTime + "\",\"eTime\":\"" + endTime + "\",\"result\":" + GetJson(ds) + "}";



            /*
            if (name == "H")
            {
                //水位过程
                sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ,H as wh from hgcom.discharge where regionidnew=" + regionidnew + " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " order by day";
            }
            else
            {
                //流量过程
                sql = "select to_char((to_date('1950-01-01 00:00:00','yyyy-mm-dd hh24:mi:ss')+houroffset/24+minuteoffset/24/60),'yyyy-mm-dd HH24:mi:ss') as day ,Qoutput as wh from hgcom.discharge where regionidnew=" + regionidnew + 
                    " and SCCD='" + SCCD + "' and bsvalue=" + bsvalue + " and bslength=" + bslen + " order by day";

            }          
            str = GetJson(DbHelper.Query(sql));           
            return str;
            */
        }

        /// <summary>
        /// 生成regionid根据reghighid和regionid
        /// </summary>
        /// <param name="reghighid"></param>
        /// <param name="regionid"></param>
        /// <returns></returns>
        private static string GetNewRegionId(string reghighid, string regionid)
        {
            //newID = "",
            string newrgnid = "";
            int rgnid = Convert.ToInt32(regionid.Length);
            if (reghighid == "0") reghighid = "";
            int mod = rgnid % 3;
            if (mod == 1) newrgnid = "00" + regionid;
            else if (mod == 2) newrgnid = "0" + regionid;
            else if (mod == 0) newrgnid = "" + regionid;

            return reghighid + newrgnid;
        }
        /// <summary>
        /// 删除某一方案
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string DelScm(NameValueCollection reqParams)
        {
            string str = "";
            string sid = reqParams.Get("sid");
            string sql = "delete jzjw_scheme where sid='" + sid + "'";
            string sqldef = "delete JZJW_DEFINEDNODES where sid='" + sid + "'";
            string sqlrgn = "delete jzjw_region where sid='" + sid + "'";
            DbHelper.ExecuteSql(sqldef);
            DbHelper.ExecuteSql(sqlrgn);
            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;

        }
        /// <summary>
        /// 判断某方案是否已经选择出口河段
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string IsExitShape(NameValueCollection reqParams)
        {
            string str = "";
            string sid = reqParams.Get("sid");
            string sql = "select count(*) from jzjw_definednodes where sid= '" + sid + "'";
            //获取行个数
            object obj = DbHelper.GetSingle(sql);
            if (Convert.ToInt32(obj) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        /// <summary>
        /// 河道模拟方案 新建方案ID号
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string getNscmnewid(NameValueCollection reqParams)
        {
            DateTime dt = DateTime.Now;
            string slnclass = reqParams.Get("slnclass");
            //string sql = "select count(sid) from jzjw_scheme where slnclass='" + slnclass + "' and substr(sid,1,8) ="+dt.ToString("yyyyMMdd");
            string sql = "select max(substr(sid,11,3)) from r_simulationscheme where substr(sid,1,8)=" + dt.ToString("yyyyMMdd"); //to_char(sysdate,'yyyymmdd')";
            object obj = DbHelper.GetSingle(sql);
            string newId = "";
            int currVal = 0;
            if (obj != null)
            {
                //ren判断是否为空
                if (obj is DBNull)
                {

                }
                else
                {
                    currVal = Convert.ToInt32(obj);
                }
                currVal++;
            }
            else
            {
                currVal++;
            }
            newId = dt.ToString("yyyyMMdd") + "HP" + Convert.ToString(currVal).PadLeft(3, '0');
            return "{\"id\":\"" + newId + "\"}";

        }

        /// <summary>
        /// 新建河道模拟方案
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string getNscmnew(NameValueCollection reqParams)
        {
            string slnid = reqParams.Get("id");
            string name = reqParams.Get("name");
            string description = reqParams.Get("description");
            //用户名
            string username = reqParams.Get("username");
            //GUID
            string guid = Guid.NewGuid().ToString().Replace("-", "");
            /*
            string description="dddd";
            string name="fa11";
            string slnclass="w";
            string username="UserLRH";            
            //当前日期
            DateTime dt = DateTime.Now;
            */
            string str = "";
            string sql = "insert into R_SimulationScheme(sid,name,username,guid";
            if (!string.IsNullOrEmpty(description))
            {
                sql += ",description ) values('" + slnid + "','" + name + "','" + username + "','" + guid + "','" + description + "')";
            }
            else
            {
                sql += ") values('" + slnid + "','" + name + "','" + username + "','" + guid + "')";
            }

            if (DbHelper.ExecuteSql(sql) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            return str;
        }
        /// <summary>
        /// 判断河道模拟方案是否存在河网ID号
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string IsExitShapeR(NameValueCollection reqParams)
        {
            string str = "";
            /*
            string sid = reqParams.Get("sidR");
            string sql = "select NetworkID from R_SimulationScheme where ID= '" + sid + "'";
            //是否存在河网ID号
            object obj = DbHelper.GetSingle(sql);
            if (Convert.ToInt32(obj) > 0)
            {
                str = "{\"msg\":\"ok\"}";
            }
            else
            {
                str = "{\"msg\":\"error\"}";
            }
            */
            str = "{\"msg\":\"error\"}";
            return str;
        }
        /// <summary>
        /// 河道模拟-提交河段选择
        /// </summary>
        /// <param name="reqParams"></param>
        /// <returns></returns>
        public static string AddRegionSelR(NameValueCollection reqParams)
        {

            string sid = "", shape = "", regionid = "", binstrlen = "", binstrval = "";
            //设置为空值
            string reghighid = "";
            //string jsonStr = reqParams.Get("rslt");

            //测试用1
            //string jsonStr = "{\"features\":[{\"regionid\":\"000001114\",\"sid\":\"20140713HP001\",\"binstrlen\":\"1445\",\"reghighid\":\"\",\"binstrval\":\"0\"},{\"regionid\":\"000001114038\",\"sid\":\"20140713HP001\",\"binstrlen\":\"1805\",\"reghighid\":\"\",\"binstrval\":\"0\"},{\"regionid\":\"000001114\",\"sid\":\"20140713HP001\",\"binstrlen\":\"1731\",\"reghighid\":\"\",\"binstrval\":\"0\"},{\"regionid\":\"000001114040\",\"sid\":\"20140713HP001\",\"binstrlen\":\"1661\",\"reghighid\":\"\",\"binstrval\":\"0\"}]}";
            //测试用2
            string jsonStr = "{\"features\":[{\"shape\":\"{\"paths\":[[[12152362.903002605,2590232.5376386247],[12152517.513584154,2590232.5376386247],[12152641.201949282,2590232.5376386247],[12153043.189361194,2590232.5376386247],[12153074.111477502,2590232.5376386247],[12153507.020905608,2590232.5376386247],[12154063.618798956,2590232.5376386247],[12154218.229380503,2590232.5376386247],[12154310.995729432,2590232.5376386247],[12154620.216692306,2590232.5376386247],[12154991.281987907,2590232.5376386247],[12155516.95776494,2590232.5376386247],[12155609.724113874,2590232.5376386247],[12155764.33459531,2590232.5376386247],[12155888.023060543,2590232.5376386247],[12156259.088356148,2590232.5376386247],[12156444.620953891,2590031.495227231],[12156506.465186508,2590031.495227231],[12156599.23153544,2589930.974882531],[12156661.075667946,2589930.974882531],[12156753.842016876,2589930.974882531],[12156908.452598426,2589763.4424389726],[12157124.90731248,2589763.4424389726],[12157279.517793912,2589763.4424389726],[12157465.050491769,2589763.4424389726],[12157495.97250797,2589729.9361319267],[12157681.505205829,2589729.9361319267],[12157743.349438444,2589796.948813803],[12157774.271454642,2589796.948813803],[12157990.726268806,2589796.948813803],[12158207.180982862,2589796.948813803],[12158299.947331794,2589796.948813803],[12158330.8694481,2589763.4424389726],[12158361.7914643,2589763.4424389726],[12158392.713580608,2589729.9361319267],[12158423.635696914,2589729.9361319267],[12158454.557813227,2589729.9361319267],[12158732.8567599,2589729.9361319267],[12158763.778876208,2589696.429892666],[12158887.467341447,2589696.429892666],[12159227.610420631,2589696.429892666],[12159289.454653248,2589763.4424389726],[12159320.376769556,2589729.9361319267],[12159351.298885863,2589729.9361319267],[12159536.831483612,2589729.9361319267],[12159598.675716229,2589729.9361319267],[12159876.974662904,2589729.9361319267],[12159907.896779211,2589763.4424389726],[12160093.429376958,2589763.4424389726],[12160278.962074816,2589763.4424389726],[12160371.728323627,2589662.9237211887],[12160495.416788869,2589662.9237211887],[12160804.637851857,2589662.9237211887],[12160835.559968164,2589629.4176174933],[12160897.40420078,2589629.4176174933],[12160928.326216975,2589662.9237211887],[12161113.858914834,2589662.9237211887],[12161175.703147458,2589662.9237211887],[12161206.625263764,2589696.429892666],[12161237.547279963,2589696.429892666],[12161268.469396273,2589729.9361319267],[12161794.145173311,2589729.9361319267],[12161825.06728962,2589763.4424389726],[12161855.989405928,2589763.4424389726],[12161917.833638543,2589830.455256422],[12161948.755754858,2589830.455256422],[12161979.677871168,2589863.961766834],[12162041.522103786,2589863.961766834],[12162227.054701531,2590065.002144392],[12162227.054701531,2590098.5091293394],[12162227.054701531,2590232.5376386247],[12162257.97681784,2590266.044962571],[12162257.97681784,2590433.582599313],[12162381.665182969,2590567.6138207456],[12162381.665182969,2590668.1380301886],[12162443.509415584,2590735.1545088943],[12162443.509415584,2590902.6967839655],[12162505.3536482,2590969.7142121303],[12162505.3536482,2591338.314808187],[12162567.197880823,2591405.333999921],[12162629.042113442,2591405.333999921],[12162659.964129638,2591371.8243701346],[12162690.886245944,2591371.8243701346],[12162721.80836226,2591338.314808187],[12162752.73047857,2591338.314808187],[12162814.574711189,2591271.2958877888],[12162969.185192624,2591271.2958877888],[12163031.02942524,2591271.2958877888],[12163061.951541549,2591237.7865293412],[12163154.71789048,2591237.7865293412],[12163309.328371918,2591405.333999921],[12163371.172604537,2591405.333999921],[12163402.094720844,2591438.8436975437],[12163494.861069776,2591438.8436975437],[12163525.783085972,2591405.333999921],[12164236.99156086,2591405.333999921],[12164360.6800261,2591405.333999921],[12164422.524158606,2591472.353463005],[12165257.420998633,2591472.353463005],[12165288.34311494,2591505.863187817],[12165442.953696487,2591505.863187817],[12165473.8758128,2591539.3730889647],[12165504.797929106,2591539.3730889647],[12165628.486294234,2591673.41337196],[12165659.408410544,2591673.41337196],[12165844.941008288,2591874.475723374],[12165844.941008288,2591907.9863708355],[12166246.9284202,2592343.6308543948],[12166772.604197234,2592913.3370258496],[12166803.526313549,2592946.849777264],[12166834.448429856,2592946.849777264],[12167205.51372546,2593349.007872681],[12167205.51372546,2593382.5215067],[12167236.435741656,2593416.0352086267],[12167267.357857963,2593416.0352086267],[12167298.279974272,2593449.5489784484],[12167298.279974272,2593483.0628161724],[12168566.086342515,2594857.188205941],[12168566.086342515,2595091.80635848],[12168566.086342515,2595259.392760746],[12168504.242109893,2595326.427840777],[12168566.086342515,2595393.463192649],[12168535.164226208,2595426.9809705303],[12168535.164226208,2595527.53460346],[12168504.242109893,2595561.052653207],[12168504.242109893,2596063.8314478477],[12168504.242109893,2596533.1053413684],[12168566.086342515,2596600.1455879593],[12168566.086342515,2596633.6658132565],[12168597.008458829,2596667.1861065547],[12168720.696823956,2596801.2678512884],[12168782.541056572,2596801.2678512884],[12169029.917886931,2597069.4347137585],[12169462.827415152,2597069.4347137585],[12169493.749531468,2597102.9558911985],[12169586.51578028,2597102.9558911985],[12169648.360012898,2597169.9984501344],[12169741.12636183,2597169.9984501344],[12169772.048478138,2597203.5198316397],[12169833.892610645,2597203.5198316397],[12169926.658959577,2597304.084384269],[12170050.347424809,2597304.084384269],[12170081.269541124,2597337.606037859],[12170112.191557322,2597337.606037859],[12170143.113673627,2597371.127759475],[12170174.03578994,2597371.127759475],[12170204.957906246,2597404.649440596],[12170266.802138869,2597404.649440596],[12170637.867434466,2597806.916114269],[12170730.633683288,2597806.916114269],[12170792.477915904,2597873.9615304945],[12170916.166381145,2597873.9615304945],[12170978.010513648,2597941.0072188843],[12170978.010513648,2598041.576153284],[12170947.088497452,2598075.0993036856],[12170947.088497452,2598209.1925857994],[12170854.322148526,2598309.763261949],[12170854.322148526,2598577.954617703],[12170885.244264834,2598611.4788570204],[12170885.244264834,2598712.0518748434],[12170854.322148526,2598745.5763864303],[12170854.322148526,2598980.2497650487],[12170916.166381145,2599047.299945491],[12171008.932629956,2599047.299945491],[12171534.608406996,2599617.2372579714],[12171565.530523304,2599617.2372579714],[12171596.452639611,2599650.763607834],[12171627.374755928,2599650.763607834],[12171751.063221162,2599784.869688299],[12171781.98533747,2599784.869688299],[12171905.6737026,2599918.976749874],[12172091.206400456,2599918.976749874],[12172585.96006118,2600455.416219708],[12172957.025356784,2600455.416219708],[12173018.869489294,2600522.4722846113],[12173049.791605605,2600522.4722846113],[12173080.71372191,2600556.0004735333],[12173142.557954527,2600556.0004735333],[12173173.480070844,2600589.528730577],[12173235.32430346,2600589.528730577],[12173389.934784897,2600757.1710377587],[12173451.779017514,2600757.1710377587],[12173482.701133825,2600723.642440052],[12173822.844313117,2600723.642440052],[12173853.766329313,2600723.642440052],[12173884.688445622,2600690.1139104855],[12174070.22114348,2600690.1139104855],[12174162.9873923,2600589.528730577],[12174286.675857533,2600589.528730577],[12174472.208455278,2600589.528730577],[12174564.97480421,2600488.944163823],[12174688.663169332,2600488.944163823],[12174997.884232316,2600153.666919767],[12175059.728464937,2600153.666919767],[12175214.339046484,2599986.0307435724],[12175276.183178987,2599986.0307435724],[12175338.027411612,2599986.0307435724],[12175430.793760536,2599885.449855179],[12175647.24847459,2599885.449855179],[12175709.092707217,2599885.449855179],[12175770.936939832,2599818.396378668],[12176018.313770194,2599818.396378668],[12176049.2358865,2599851.9231371447],[12176513.067430925,2599851.9231371447],[12176543.989547234,2599885.449855179],[12176574.911663542,2599885.449855179],[12176729.52214498,2600053.085009711],[12176853.210610213,2600187.194250798],[12177038.743207958,2600187.194250798],[12177162.4316732,2600321.3046902865],[12177502.574852493,2600321.3046902865],[12177533.4969688,2600287.7769782376],[12177595.341101306,2600287.7769782376],[12177626.263217611,2600321.3046902865],[12177688.107450236,2600321.3046902865],[12177719.029566549,2600354.8324704636],[12177811.795915471,2600354.8324704636],[12177873.640047982,2600354.8324704636],[12177904.562164292,2600354.8324704636],[12177935.4842806,2600321.3046902865],[12178151.938994654,2600321.3046902865],[12178306.549576202,2600321.3046902865],[12178337.471692512,2600287.7769782376],[12178770.381120618,2600287.7769782376],[12178894.069585858,2600287.7769782376],[12178955.913818477,2600287.7769782376],[12178986.835934792,2600321.3046902865],[12178986.835934792,2600421.88823517],[12179141.446416222,2600589.528730577],[12179172.368532527,2600589.528730577],[12179265.13488146,2600690.1139104855],[12179296.05689766,2600690.1139104855],[12179450.667479206,2600857.757131115],[12179388.823246589,2600924.8149397396],[12179388.823246589,2600958.343946262],[12179419.745362898,2600991.8730209293],[12179419.745362898,2601058.93137468],[12179326.979013966,2601159.5193078355],[12179326.979013966,2601193.0487913713],[12179388.823246589,2601260.1079628724],[12179388.823246589,2601360.697231256],[12179450.667479206,2601427.756975731],[12179450.667479206,2601461.287004473],[12179759.888542192,2601796.590932156],[12179821.732774807,2601796.590932156],[12180532.941149589,2602567.815869657]]],\"spatialReference\":{\"wkid\":102100}}\",\"regionid\":\"000001114\",\"binstrval\":\"0\",\"reghighid\":\"\",\"sid\":\"20140716HP001\",\"binstrlen\":\"1273\"},{\"shape\":\"{\"paths\":[[[12127037.698655084,2619745.315838668],[12127037.698655084,2619577.4798644884],[12126852.165957227,2619376.0790723367],[12126852.165957227,2619241.8131796694],[12126264.64594757,2618604.0654215743],[12125986.3470009,2618301.983040923],[12125986.3470009,2618134.1619487],[12125955.424884591,2618100.59791459],[12125955.424884591,2618067.0339491656],[12125862.658635773,2617966.342464995],[12125831.736519463,2617966.342464995],[12125491.593340168,2617597.145753335],[12125491.593340168,2616959.4620507555],[12125522.515456485,2616925.9004200194],[12125522.515456485,2616556.7271212353],[12125708.048054228,2616355.363308662],[12125708.048054228,2616086.8821771527],[12125738.97017054,2616053.322330945],[12125738.97017054,2616019.7626620103],[12125677.125937914,2615952.643312693],[12125862.658635773,2615751.2869115327],[12125862.658635773,2615482.8156608297],[12125862.658635773,2615449.257049629],[12125893.580752086,2615415.6986156823],[12125893.580752086,2615382.1401416915],[12125924.502868395,2615348.5817363],[12125924.502868395,2615315.0233995058],[12126048.191233516,2615180.790738287],[12126048.191233516,2615046.5592832114],[12126048.191233516,2614845.2139952695],[12126079.113349823,2614811.656687318],[12126079.113349823,2614408.9745583],[12126079.113349823,2613737.859472777],[12126079.113349823,2613637.194542448],[12126140.957582448,2613570.084931609],[12126140.957582448,2613435.8666410767],[12126171.879698755,2613402.31221263],[12126171.879698755,2613066.7718061274],[12126171.879698755,2613033.218131524],[12126140.957582448,2612999.6645254465],[12126140.957582448,2612966.110987894],[12125522.515456485,2612295.054951001],[12125522.515456485,2612227.950821894],[12125367.904975044,2612060.191697838],[12125367.904975044,2611624.0262059793],[12125306.060742425,2611556.9248164524],[12125306.060742425,2611187.872178597],[12125306.060742425,2611120.7725693397],[12125306.060742425,2610550.437163919],[12125306.060742425,2610214.95497031],[12125306.060742425,2609879.4796201955],[12125306.060742425,2609812.385458189],[12125306.060742425,2609074.366760188],[12125306.060742425,2608906.639805869],[12125306.060742425,2608873.0947287977],[12125306.060742425,2608202.2055933983],[12125336.982858738,2608168.661843735],[12125336.982858738,2607967.400781484],[12125336.982858738,2607363.6325775227],[12125336.982858738,2607263.0067689344],[12124594.852267534,2606458.0217887983],[12124594.852267534,2606055.5441643805],[12124594.852267534,2605921.3870696262],[12124594.852267534,2605317.693882515]]],\"spatialReference\":{\"wkid\":102100}}\",\"regionid\":\"000001114046\",\"binstrval\":\"0\",\"reghighid\":\"\",\"sid\":\"20140716HP001\",\"binstrlen\":\"1445\"},{\"shape\":\"{\"paths\":[[[12109443.020581812,2588791.787376671],[12109473.94269812,2588791.787376671],[12109504.864814429,2588825.2917861533],[12109566.709047046,2588825.2917861533],[12109597.631163351,2588858.7962633907],[12109628.553179557,2588858.7962633907],[12109659.475295866,2588892.300808386],[12109845.007993722,2588892.300808386],[12109906.852126228,2588959.310101649],[12109937.774242535,2588959.310101649],[12109968.696358845,2588992.814741446],[12110030.540591467,2588992.814741446],[12110061.462707777,2588992.814741446],[12110092.384824086,2589026.3195574856],[12110123.306940394,2589026.3195574856],[12110246.99530552,2589160.339499247],[12110277.917421833,2589160.339499247],[12110401.60588707,2589294.3605252774],[12110432.528003378,2589294.3605252774],[12110494.372135883,2589294.3605252774],[12110710.826950053,2589528.8998215618],[12111205.58061078,2590065.002144392],[12111205.58061078,2590333.0598138543],[12111205.58061078,2590634.6298925616],[12111205.58061078,2591237.7865293412],[12111205.58061078,2591338.314808187],[12111205.58061078,2591673.41337196],[12111205.58061078,2592075.540625968],[12111267.4248434,2592142.562694529],[12111329.268975904,2592142.562694529],[12111360.191092212,2592176.0738848546],[12111422.035324836,2592109.051572071],[12111452.957441144,2592109.051572071],[12111607.56792258,2591941.4970861566],[12111607.56792258,2591874.475723374],[12111669.412155196,2591807.454632011],[12111700.334271504,2591807.454632011],[12111731.256387811,2591840.965143767],[12111762.178504128,2591840.965143767],[12111793.100620436,2591874.475723374],[12111824.022736743,2591874.475723374],[12111854.944853054,2591907.9863708355],[12111854.944853054,2591941.4970861566],[12111947.711101877,2592042.0296392287],[12111947.711101877,2592142.562694529],[12111978.633218184,2592176.0738848546],[12111978.633218184,2592209.585143034],[12112071.399567109,2592310.1193247563],[12112071.399567109,2592343.6308543948],[12112133.243799726,2592343.6308543948],[12112164.16591604,2592310.1193247563],[12112535.23111153,2592310.1193247563],[12112566.15322784,2592343.6308543948],[12112566.15322784,2592410.6540087876],[12112504.308995215,2592477.6775431465],[12112504.308995215,2592511.189412131],[12112442.46486271,2592578.2133537293],[12112349.698513784,2592578.2133537293],[12112256.932164852,2592678.749775181],[12112256.932164852,2592779.28669904],[12112195.087932236,2592846.3117266796],[12112195.087932236,2592913.3370258496],[12112256.932164852,2592980.3625965626],[12112504.308995215,2592980.3625965626],[12112597.075344147,2592879.8243423225],[12112782.607941894,2592879.8243423225],[12112813.5300582,2592913.3370258496],[12112844.452174513,2592913.3370258496],[12112875.374290818,2592946.849777264],[12112875.374290818,2592980.3625965626],[12112751.685925696,2593114.4144441537],[12112751.685925696,2593315.4944150615],[12112751.685925696,2593382.5215067],[12112751.685925696,2593818.2048197803],[12112720.763809389,2593851.719404507],[12112720.763809389,2593985.778314044],[12112720.763809389,2594052.8082305854],[12112844.452174513,2594186.8688787194],[12112844.452174513,2594253.899610344],[12112782.607941894,2594320.930505166],[12112782.607941894,2594421.4775196365],[12112813.5300582,2594454.993326999],[12112813.5300582,2594488.5092022885],[12112968.14063975,2594656.0894892784],[12112968.14063975,2594957.7383730332],[12113246.43958642,2595259.392760746],[12113246.43958642,2595292.9102667775],[12113215.517470114,2595326.427840777],[12113215.517470114,2595728.643921518],[12113215.517470114,2595762.1623790995],[12113215.517470114,2595896.23678067],[12113215.517470114,2596130.8697906123],[12113308.283819044,2596231.427706137],[12113308.283819044,2596298.4667287855],[12113648.42689822,2596667.1861065547],[12113679.349014528,2596700.706467858],[12113679.349014528,2596734.2268971675],[12113741.193247152,2596801.2678512884],[12113741.193247152,2596868.3091859627],[12113772.11536346,2596901.829955314],[12113772.11536346,2597002.3926714556],[12113772.11536346,2597203.5198316397],[12113803.037479768,2597237.0412811604],[12113803.037479768,2597304.084384269],[12115008.99961539,2598611.4788570204],[12115008.99961539,2598779.1009660903],[12115008.99961539,2598913.199965457],[12115039.921731705,2598946.7247769465],[12115039.921731705,2598980.2497650487],[12115070.8437479,2599013.7748212297],[12115070.8437479,2599080.8251378387],[12115163.610096827,2599181.401123351],[12115163.610096827,2599281.9776130808],[12115503.75327612,2599650.763607834],[12115782.052222792,2599650.763607834],[12116184.039634705,2599650.763607834],[12116307.727999832,2599650.763607834],[12116400.494348764,2599650.763607834],[12116493.260597575,2599751.343066032],[12116555.104830194,2599751.343066032],[12116833.403776873,2599751.343066032],[12116957.092242103,2599751.343066032],[12117451.845902836,2599751.343066032],[12117853.833314748,2599751.343066032],[12118286.742742855,2599751.343066032],[12118317.664859165,2599717.816511867],[12118410.431208096,2599717.816511867],[12118534.119573224,2599583.7109762044],[12118595.96380584,2599583.7109762044],[12118688.730154766,2599583.7109762044],[12118750.574387388,2599516.6587255057],[12118781.496403586,2599516.6587255057],[12118843.340636205,2599449.6066386374],[12119245.328048114,2599449.6066386374],[12119369.016413242,2599449.6066386374],[12119430.86064586,2599449.6066386374],[12120018.380655516,2599449.6066386374],[12120111.147004448,2599449.6066386374],[12120234.835369568,2599449.6066386374],[12120265.757485878,2599449.6066386374],[12120389.44595112,2599315.503282019],[12120420.368067428,2599315.503282019],[12120513.134316249,2599214.9265880226],[12120574.978548864,2599214.9265880226],[12120605.900665171,2599181.401123351],[12120636.82278148,2599181.401123351],[12120667.744897796,2599147.8757267636],[12120729.589130413,2599147.8757267636],[12120822.355379226,2599047.299945491],[12121348.031256378,2599047.299945491],[12121564.48597043,2599047.299945491],[12121626.330203049,2599047.299945491],[12121935.551165922,2599047.299945491],[12122152.005980087,2599047.299945491],[12122182.928096397,2599013.7748212297],[12122213.85021271,2599013.7748212297],[12122523.07117558,2598678.5274313227],[12122523.07117558,2598645.003055866],[12122553.993291888,2598611.4788570204],[12122553.993291888,2598577.954617703],[12123419.81224822,2597639.303872946],[12123759.955427509,2597270.5627987026],[12123759.955427509,2597169.9984501344],[12124069.176490491,2596834.788484621]]],\"spatialReference\":{\"wkid\":102100}}\",\"regionid\":\"000001114047\",\"binstrval\":\"0\",\"reghighid\":\"\",\"sid\":\"20140716HP001\",\"binstrlen\":\"1416\"}]}";
            JsonObject resultsJsonObj = new JsonObject(jsonStr);
            JsonProperty jsonProperty = resultsJsonObj["features"];

            riverSegs.Clear();
            sid = jsonProperty.Items[0]["sid"].Value;
            //删除指定方案的出口河段
            string sqlDel = "delete from R_Definednodes where sid ='" + sid + "'";
            DbHelper.ExecuteSql(sqlDel);

            int cnt = jsonProperty.Count;
            //string[,] strRst=new string[cnt,5];
            for (int i = 0; i < cnt; i++)
            {
                JsonProperty jp = jsonProperty.Items[i];

                if (jp != null)
                {
                    JsonProperty jpItem = jp["sid"];
                    if (jpItem != null) { sid = jpItem.Value; }

                    jpItem = jp["binstrlen"];
                    if (jpItem != null) { binstrlen = jpItem.Value; }

                    jpItem = jp["binstrval"];
                    if (jpItem != null) { binstrval = jpItem.Value; }

                    jpItem = jp["reghighid"];
                    if (jpItem != null) { reghighid = jpItem.Value; }

                    jpItem = jp["regionid"];
                    if (jpItem != null)
                    {
                        regionid = jpItem.Value;
                        //前三位替换成341
                        //regionid = "341" + regionid.Substring(3);
                    }
                    //strRst[i, 0] = sid;
                    //strRst[i, 1] = regionid;
                    //strRst[i, 2] = binstrlen;
                    //strRst[i, 3] = binstrval;
                    //strRst[i, 4] = reghighid;

                    jpItem = jp["shape"];
                    if (jpItem != null) { shape = jpItem.Value; }
                }
                if (!string.IsNullOrEmpty(sid))
                    AddDefinedNodesOld(sid, regionid, binstrlen, binstrval, reghighid, shape, "R_Definednodes", "");
            }

            //1 计算下游河段
            string sql = "select * from R_Definednodes where sid='" + sid + "' and binstrval=0 and rownum=1 order by regionid,binstrlen";
            DataSet ds = DbHelper.Query(sql);
            if (ds != null && ds.Tables.Count > 0)
            {
                DataTable dt = ds.Tables[0];
                // && dt.Rows[0]["minrgnid"].ToString() != ""
                if (dt != null && dt.Rows.Count > 0)
                {
                    long minregionidnew = Convert.ToInt64(dt.Rows[0]["regionid"]);
                    long minbinstrlen = Convert.ToInt64(dt.Rows[0]["binstrlen"]);
                }
                //后续代码继续0716
            }


            string str = "{\"msg\":\"ok\"}";
            //河道选择后需要根据后台计算
            return str;
        }
    }
    /// <summary>
    /// 新RiverSeg类
    /// </summary>
    public class RiverSeg : IEquatable<RiverSeg>
    {
        public RiverSeg() { }
        public RiverSeg(string sid, string rgnid, long bslen, long bsval, string rgnidnew, string reghighid, string shape, Double UPSUBAREA)
        {
            this.sid = sid;
            this.REGIONID = rgnid;
            this.BINSTRVAL = bsval;
            this.BINSTRLEN = bslen;
            this.REGIONIDNEW = rgnidnew;
            this.shape = shape;
            this.REGHIGHID = reghighid;
            this.UPSUBAREA = UPSUBAREA;
        }

        public string REGIONID { get; set; }
        public long BINSTRLEN { get; set; }
        public long BINSTRVAL { get; set; }
        public string REGIONIDNEW { get; set; }
        public string REGHIGHID { get; set; }
        public string shape { get; set; }
        public string sid { get; set; }
        public Double UPSUBAREA { get; set; }

        public string lyrname { get; set; }
        public int lyrid { get; set; }
        public int objectid { get; set; }
        public int channelid { get; set; }

        public bool Equals(RiverSeg other)
        {
            return other != null && this.sid == other.sid && this.BINSTRLEN == other.BINSTRLEN && this.BINSTRVAL == other.BINSTRVAL && this.REGIONID == other.REGIONID;
        }
    }
    /// <summary>
    /// 原来的 RiverSeg自定义类
    /// </summary>
    class RiverSegOld : IEquatable<RiverSegOld>
    {
        public RiverSegOld() { }
        public RiverSegOld(string sid, int rgnid, int bslen, int bsval)
        {
            this.sid = sid;
            this.regionid = rgnid;
            this.binstrlen = bslen;
            this.binstrval = bsval;
        }

        public string sid { get; set; }
        public string lyrname { get; set; }
        public int lyrid { get; set; }
        public int objectid { get; set; }
        public int channelid { get; set; }
        public int regionid { get; set; }
        public int binstrlen { get; set; }
        public int binstrval { get; set; }
        public int reghighid { get; set; }
        public string shape { get; set; }

        public bool Equals(RiverSegOld other)
        {
            return other != null && this.sid == other.sid && this.binstrlen == other.binstrlen && this.binstrval == other.binstrval && this.regionid == other.regionid;
        }
    }
}
